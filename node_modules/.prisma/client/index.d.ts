
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model Wine
 * 
 */
export type Wine = $Result.DefaultSelection<Prisma.$WinePayload>
/**
 * Model BottleSize
 * 
 */
export type BottleSize = $Result.DefaultSelection<Prisma.$BottleSizePayload>
/**
 * Model WineBottleSize
 * 
 */
export type WineBottleSize = $Result.DefaultSelection<Prisma.$WineBottleSizePayload>
/**
 * Model Review
 * 
 */
export type Review = $Result.DefaultSelection<Prisma.$ReviewPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.wine`: Exposes CRUD operations for the **Wine** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wines
    * const wines = await prisma.wine.findMany()
    * ```
    */
  get wine(): Prisma.WineDelegate<ExtArgs>;

  /**
   * `prisma.bottleSize`: Exposes CRUD operations for the **BottleSize** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BottleSizes
    * const bottleSizes = await prisma.bottleSize.findMany()
    * ```
    */
  get bottleSize(): Prisma.BottleSizeDelegate<ExtArgs>;

  /**
   * `prisma.wineBottleSize`: Exposes CRUD operations for the **WineBottleSize** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WineBottleSizes
    * const wineBottleSizes = await prisma.wineBottleSize.findMany()
    * ```
    */
  get wineBottleSize(): Prisma.WineBottleSizeDelegate<ExtArgs>;

  /**
   * `prisma.review`: Exposes CRUD operations for the **Review** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reviews
    * const reviews = await prisma.review.findMany()
    * ```
    */
  get review(): Prisma.ReviewDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Category: 'Category',
    Wine: 'Wine',
    BottleSize: 'BottleSize',
    WineBottleSize: 'WineBottleSize',
    Review: 'Review'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "category" | "wine" | "bottleSize" | "wineBottleSize" | "review"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      Wine: {
        payload: Prisma.$WinePayload<ExtArgs>
        fields: Prisma.WineFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WineFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WineFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          findFirst: {
            args: Prisma.WineFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WineFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          findMany: {
            args: Prisma.WineFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>[]
          }
          create: {
            args: Prisma.WineCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          createMany: {
            args: Prisma.WineCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WineCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>[]
          }
          delete: {
            args: Prisma.WineDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          update: {
            args: Prisma.WineUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          deleteMany: {
            args: Prisma.WineDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WineUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WineUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WinePayload>
          }
          aggregate: {
            args: Prisma.WineAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWine>
          }
          groupBy: {
            args: Prisma.WineGroupByArgs<ExtArgs>
            result: $Utils.Optional<WineGroupByOutputType>[]
          }
          count: {
            args: Prisma.WineCountArgs<ExtArgs>
            result: $Utils.Optional<WineCountAggregateOutputType> | number
          }
        }
      }
      BottleSize: {
        payload: Prisma.$BottleSizePayload<ExtArgs>
        fields: Prisma.BottleSizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BottleSizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BottleSizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          findFirst: {
            args: Prisma.BottleSizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BottleSizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          findMany: {
            args: Prisma.BottleSizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>[]
          }
          create: {
            args: Prisma.BottleSizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          createMany: {
            args: Prisma.BottleSizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BottleSizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>[]
          }
          delete: {
            args: Prisma.BottleSizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          update: {
            args: Prisma.BottleSizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          deleteMany: {
            args: Prisma.BottleSizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BottleSizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.BottleSizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BottleSizePayload>
          }
          aggregate: {
            args: Prisma.BottleSizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBottleSize>
          }
          groupBy: {
            args: Prisma.BottleSizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<BottleSizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.BottleSizeCountArgs<ExtArgs>
            result: $Utils.Optional<BottleSizeCountAggregateOutputType> | number
          }
        }
      }
      WineBottleSize: {
        payload: Prisma.$WineBottleSizePayload<ExtArgs>
        fields: Prisma.WineBottleSizeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WineBottleSizeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WineBottleSizeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          findFirst: {
            args: Prisma.WineBottleSizeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WineBottleSizeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          findMany: {
            args: Prisma.WineBottleSizeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>[]
          }
          create: {
            args: Prisma.WineBottleSizeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          createMany: {
            args: Prisma.WineBottleSizeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WineBottleSizeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>[]
          }
          delete: {
            args: Prisma.WineBottleSizeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          update: {
            args: Prisma.WineBottleSizeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          deleteMany: {
            args: Prisma.WineBottleSizeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WineBottleSizeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WineBottleSizeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WineBottleSizePayload>
          }
          aggregate: {
            args: Prisma.WineBottleSizeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWineBottleSize>
          }
          groupBy: {
            args: Prisma.WineBottleSizeGroupByArgs<ExtArgs>
            result: $Utils.Optional<WineBottleSizeGroupByOutputType>[]
          }
          count: {
            args: Prisma.WineBottleSizeCountArgs<ExtArgs>
            result: $Utils.Optional<WineBottleSizeCountAggregateOutputType> | number
          }
        }
      }
      Review: {
        payload: Prisma.$ReviewPayload<ExtArgs>
        fields: Prisma.ReviewFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReviewFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReviewFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findFirst: {
            args: Prisma.ReviewFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReviewFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          findMany: {
            args: Prisma.ReviewFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          create: {
            args: Prisma.ReviewCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          createMany: {
            args: Prisma.ReviewCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReviewCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>[]
          }
          delete: {
            args: Prisma.ReviewDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          update: {
            args: Prisma.ReviewUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          deleteMany: {
            args: Prisma.ReviewDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReviewUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReviewUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReviewPayload>
          }
          aggregate: {
            args: Prisma.ReviewAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReview>
          }
          groupBy: {
            args: Prisma.ReviewGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReviewGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReviewCountArgs<ExtArgs>
            result: $Utils.Optional<ReviewCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    reviews: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | UserCountOutputTypeCountReviewsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    wines: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wines?: boolean | CategoryCountOutputTypeCountWinesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountWinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }


  /**
   * Count Type WineCountOutputType
   */

  export type WineCountOutputType = {
    reviews: number
    bottleSizes: number
    WineBottleSize: number
  }

  export type WineCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | WineCountOutputTypeCountReviewsArgs
    bottleSizes?: boolean | WineCountOutputTypeCountBottleSizesArgs
    WineBottleSize?: boolean | WineCountOutputTypeCountWineBottleSizeArgs
  }

  // Custom InputTypes
  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineCountOutputType
     */
    select?: WineCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeCountReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
  }

  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeCountBottleSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BottleSizeWhereInput
  }

  /**
   * WineCountOutputType without action
   */
  export type WineCountOutputTypeCountWineBottleSizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineBottleSizeWhereInput
  }


  /**
   * Count Type BottleSizeCountOutputType
   */

  export type BottleSizeCountOutputType = {
    wines: number
    WineBottleSize: number
  }

  export type BottleSizeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wines?: boolean | BottleSizeCountOutputTypeCountWinesArgs
    WineBottleSize?: boolean | BottleSizeCountOutputTypeCountWineBottleSizeArgs
  }

  // Custom InputTypes
  /**
   * BottleSizeCountOutputType without action
   */
  export type BottleSizeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSizeCountOutputType
     */
    select?: BottleSizeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BottleSizeCountOutputType without action
   */
  export type BottleSizeCountOutputTypeCountWinesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
  }

  /**
   * BottleSizeCountOutputType without action
   */
  export type BottleSizeCountOutputTypeCountWineBottleSizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineBottleSizeWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    nome: string | null
    email: string | null
    password: string | null
    isAdmin: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    nome: number
    email: number
    password: number
    isAdmin: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    isAdmin?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    nome?: true
    email?: true
    password?: true
    isAdmin?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    nome: string
    email: string
    password: string
    isAdmin: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    nome?: boolean
    email?: boolean
    password?: boolean
    isAdmin?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reviews?: boolean | User$reviewsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nome: string
      email: string
      password: string
      isAdmin: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reviews<T extends User$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly nome: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly isAdmin: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.reviews
   */
  export type User$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryAvgAggregateOutputType = {
    category_id: number | null
  }

  export type CategorySumAggregateOutputType = {
    category_id: number | null
  }

  export type CategoryMinAggregateOutputType = {
    category_id: number | null
    nome: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    category_id: number | null
    nome: string | null
  }

  export type CategoryCountAggregateOutputType = {
    category_id: number
    nome: number
    _all: number
  }


  export type CategoryAvgAggregateInputType = {
    category_id?: true
  }

  export type CategorySumAggregateInputType = {
    category_id?: true
  }

  export type CategoryMinAggregateInputType = {
    category_id?: true
    nome?: true
  }

  export type CategoryMaxAggregateInputType = {
    category_id?: true
    nome?: true
  }

  export type CategoryCountAggregateInputType = {
    category_id?: true
    nome?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CategoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CategorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _avg?: CategoryAvgAggregateInputType
    _sum?: CategorySumAggregateInputType
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    category_id: number
    nome: string
    _count: CategoryCountAggregateOutputType | null
    _avg: CategoryAvgAggregateOutputType | null
    _sum: CategorySumAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    category_id?: boolean
    nome?: boolean
    wines?: boolean | Category$winesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    category_id?: boolean
    nome?: boolean
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    category_id?: boolean
    nome?: boolean
  }

  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wines?: boolean | Category$winesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      wines: Prisma.$WinePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      category_id: number
      nome: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }

  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoryFindUniqueArgs>(args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoryFindFirstArgs>(args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `category_id`
     * const categoryWithCategory_idOnly = await prisma.category.findMany({ select: { category_id: true } })
     * 
     */
    findMany<T extends CategoryFindManyArgs>(args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
     */
    create<T extends CategoryCreateArgs>(args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categories.
     * @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoryCreateManyArgs>(args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Categories and returns the data saved in the database.
     * @param {CategoryCreateManyAndReturnArgs} args - Arguments to create many Categories.
     * @example
     * // Create many Categories
     * const category = await prisma.category.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Categories and only return the `category_id`
     * const categoryWithCategory_idOnly = await prisma.category.createManyAndReturn({ 
     *   select: { category_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, CategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
     */
    delete<T extends CategoryDeleteArgs>(args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoryUpdateArgs>(args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoryDeleteManyArgs>(args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoryUpdateManyArgs>(args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
     */
    upsert<T extends CategoryUpsertArgs>(args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wines<T extends Category$winesArgs<ExtArgs> = {}>(args?: Subset<T, Category$winesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly category_id: FieldRef<"Category", 'Int'>
    readonly nome: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category createManyAndReturn
   */
  export type CategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.wines
   */
  export type Category$winesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model Wine
   */

  export type AggregateWine = {
    _count: WineCountAggregateOutputType | null
    _avg: WineAvgAggregateOutputType | null
    _sum: WineSumAggregateOutputType | null
    _min: WineMinAggregateOutputType | null
    _max: WineMaxAggregateOutputType | null
  }

  export type WineAvgAggregateOutputType = {
    wine_id: number | null
    preco: number | null
    precoPromocao: number | null
    categoriaId: number | null
    averageRating: number | null
  }

  export type WineSumAggregateOutputType = {
    wine_id: number | null
    preco: number | null
    precoPromocao: number | null
    categoriaId: number | null
    averageRating: number | null
  }

  export type WineMinAggregateOutputType = {
    wine_id: number | null
    nome: string | null
    descricao: string | null
    preco: number | null
    imagem: string | null
    emPromocao: boolean | null
    precoPromocao: number | null
    emDestaque: boolean | null
    descricaoDestaque: string | null
    categoriaId: number | null
    averageRating: number | null
  }

  export type WineMaxAggregateOutputType = {
    wine_id: number | null
    nome: string | null
    descricao: string | null
    preco: number | null
    imagem: string | null
    emPromocao: boolean | null
    precoPromocao: number | null
    emDestaque: boolean | null
    descricaoDestaque: string | null
    categoriaId: number | null
    averageRating: number | null
  }

  export type WineCountAggregateOutputType = {
    wine_id: number
    nome: number
    descricao: number
    preco: number
    imagem: number
    emPromocao: number
    precoPromocao: number
    emDestaque: number
    descricaoDestaque: number
    categoriaId: number
    averageRating: number
    _all: number
  }


  export type WineAvgAggregateInputType = {
    wine_id?: true
    preco?: true
    precoPromocao?: true
    categoriaId?: true
    averageRating?: true
  }

  export type WineSumAggregateInputType = {
    wine_id?: true
    preco?: true
    precoPromocao?: true
    categoriaId?: true
    averageRating?: true
  }

  export type WineMinAggregateInputType = {
    wine_id?: true
    nome?: true
    descricao?: true
    preco?: true
    imagem?: true
    emPromocao?: true
    precoPromocao?: true
    emDestaque?: true
    descricaoDestaque?: true
    categoriaId?: true
    averageRating?: true
  }

  export type WineMaxAggregateInputType = {
    wine_id?: true
    nome?: true
    descricao?: true
    preco?: true
    imagem?: true
    emPromocao?: true
    precoPromocao?: true
    emDestaque?: true
    descricaoDestaque?: true
    categoriaId?: true
    averageRating?: true
  }

  export type WineCountAggregateInputType = {
    wine_id?: true
    nome?: true
    descricao?: true
    preco?: true
    imagem?: true
    emPromocao?: true
    precoPromocao?: true
    emDestaque?: true
    descricaoDestaque?: true
    categoriaId?: true
    averageRating?: true
    _all?: true
  }

  export type WineAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wine to aggregate.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wines
    **/
    _count?: true | WineCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WineAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WineSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WineMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WineMaxAggregateInputType
  }

  export type GetWineAggregateType<T extends WineAggregateArgs> = {
        [P in keyof T & keyof AggregateWine]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWine[P]>
      : GetScalarType<T[P], AggregateWine[P]>
  }




  export type WineGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineWhereInput
    orderBy?: WineOrderByWithAggregationInput | WineOrderByWithAggregationInput[]
    by: WineScalarFieldEnum[] | WineScalarFieldEnum
    having?: WineScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WineCountAggregateInputType | true
    _avg?: WineAvgAggregateInputType
    _sum?: WineSumAggregateInputType
    _min?: WineMinAggregateInputType
    _max?: WineMaxAggregateInputType
  }

  export type WineGroupByOutputType = {
    wine_id: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao: boolean
    precoPromocao: number | null
    emDestaque: boolean
    descricaoDestaque: string | null
    categoriaId: number
    averageRating: number
    _count: WineCountAggregateOutputType | null
    _avg: WineAvgAggregateOutputType | null
    _sum: WineSumAggregateOutputType | null
    _min: WineMinAggregateOutputType | null
    _max: WineMaxAggregateOutputType | null
  }

  type GetWineGroupByPayload<T extends WineGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WineGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WineGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WineGroupByOutputType[P]>
            : GetScalarType<T[P], WineGroupByOutputType[P]>
        }
      >
    >


  export type WineSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wine_id?: boolean
    nome?: boolean
    descricao?: boolean
    preco?: boolean
    imagem?: boolean
    emPromocao?: boolean
    precoPromocao?: boolean
    emDestaque?: boolean
    descricaoDestaque?: boolean
    categoriaId?: boolean
    averageRating?: boolean
    categoria?: boolean | CategoryDefaultArgs<ExtArgs>
    reviews?: boolean | Wine$reviewsArgs<ExtArgs>
    bottleSizes?: boolean | Wine$bottleSizesArgs<ExtArgs>
    WineBottleSize?: boolean | Wine$WineBottleSizeArgs<ExtArgs>
    _count?: boolean | WineCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wine"]>

  export type WineSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wine_id?: boolean
    nome?: boolean
    descricao?: boolean
    preco?: boolean
    imagem?: boolean
    emPromocao?: boolean
    precoPromocao?: boolean
    emDestaque?: boolean
    descricaoDestaque?: boolean
    categoriaId?: boolean
    averageRating?: boolean
    categoria?: boolean | CategoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wine"]>

  export type WineSelectScalar = {
    wine_id?: boolean
    nome?: boolean
    descricao?: boolean
    preco?: boolean
    imagem?: boolean
    emPromocao?: boolean
    precoPromocao?: boolean
    emDestaque?: boolean
    descricaoDestaque?: boolean
    categoriaId?: boolean
    averageRating?: boolean
  }

  export type WineInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoryDefaultArgs<ExtArgs>
    reviews?: boolean | Wine$reviewsArgs<ExtArgs>
    bottleSizes?: boolean | Wine$bottleSizesArgs<ExtArgs>
    WineBottleSize?: boolean | Wine$WineBottleSizeArgs<ExtArgs>
    _count?: boolean | WineCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WineIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | CategoryDefaultArgs<ExtArgs>
  }

  export type $WinePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wine"
    objects: {
      categoria: Prisma.$CategoryPayload<ExtArgs>
      reviews: Prisma.$ReviewPayload<ExtArgs>[]
      bottleSizes: Prisma.$BottleSizePayload<ExtArgs>[]
      WineBottleSize: Prisma.$WineBottleSizePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      wine_id: number
      nome: string
      descricao: string
      preco: number
      imagem: string
      emPromocao: boolean
      precoPromocao: number | null
      emDestaque: boolean
      descricaoDestaque: string | null
      categoriaId: number
      averageRating: number
    }, ExtArgs["result"]["wine"]>
    composites: {}
  }

  type WineGetPayload<S extends boolean | null | undefined | WineDefaultArgs> = $Result.GetResult<Prisma.$WinePayload, S>

  type WineCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WineFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WineCountAggregateInputType | true
    }

  export interface WineDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wine'], meta: { name: 'Wine' } }
    /**
     * Find zero or one Wine that matches the filter.
     * @param {WineFindUniqueArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WineFindUniqueArgs>(args: SelectSubset<T, WineFindUniqueArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Wine that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WineFindUniqueOrThrowArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WineFindUniqueOrThrowArgs>(args: SelectSubset<T, WineFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Wine that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindFirstArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WineFindFirstArgs>(args?: SelectSubset<T, WineFindFirstArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Wine that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindFirstOrThrowArgs} args - Arguments to find a Wine
     * @example
     * // Get one Wine
     * const wine = await prisma.wine.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WineFindFirstOrThrowArgs>(args?: SelectSubset<T, WineFindFirstOrThrowArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Wines that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wines
     * const wines = await prisma.wine.findMany()
     * 
     * // Get first 10 Wines
     * const wines = await prisma.wine.findMany({ take: 10 })
     * 
     * // Only select the `wine_id`
     * const wineWithWine_idOnly = await prisma.wine.findMany({ select: { wine_id: true } })
     * 
     */
    findMany<T extends WineFindManyArgs>(args?: SelectSubset<T, WineFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Wine.
     * @param {WineCreateArgs} args - Arguments to create a Wine.
     * @example
     * // Create one Wine
     * const Wine = await prisma.wine.create({
     *   data: {
     *     // ... data to create a Wine
     *   }
     * })
     * 
     */
    create<T extends WineCreateArgs>(args: SelectSubset<T, WineCreateArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Wines.
     * @param {WineCreateManyArgs} args - Arguments to create many Wines.
     * @example
     * // Create many Wines
     * const wine = await prisma.wine.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WineCreateManyArgs>(args?: SelectSubset<T, WineCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wines and returns the data saved in the database.
     * @param {WineCreateManyAndReturnArgs} args - Arguments to create many Wines.
     * @example
     * // Create many Wines
     * const wine = await prisma.wine.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wines and only return the `wine_id`
     * const wineWithWine_idOnly = await prisma.wine.createManyAndReturn({ 
     *   select: { wine_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WineCreateManyAndReturnArgs>(args?: SelectSubset<T, WineCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Wine.
     * @param {WineDeleteArgs} args - Arguments to delete one Wine.
     * @example
     * // Delete one Wine
     * const Wine = await prisma.wine.delete({
     *   where: {
     *     // ... filter to delete one Wine
     *   }
     * })
     * 
     */
    delete<T extends WineDeleteArgs>(args: SelectSubset<T, WineDeleteArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Wine.
     * @param {WineUpdateArgs} args - Arguments to update one Wine.
     * @example
     * // Update one Wine
     * const wine = await prisma.wine.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WineUpdateArgs>(args: SelectSubset<T, WineUpdateArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Wines.
     * @param {WineDeleteManyArgs} args - Arguments to filter Wines to delete.
     * @example
     * // Delete a few Wines
     * const { count } = await prisma.wine.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WineDeleteManyArgs>(args?: SelectSubset<T, WineDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wines
     * const wine = await prisma.wine.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WineUpdateManyArgs>(args: SelectSubset<T, WineUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wine.
     * @param {WineUpsertArgs} args - Arguments to update or create a Wine.
     * @example
     * // Update or create a Wine
     * const wine = await prisma.wine.upsert({
     *   create: {
     *     // ... data to create a Wine
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wine we want to update
     *   }
     * })
     */
    upsert<T extends WineUpsertArgs>(args: SelectSubset<T, WineUpsertArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Wines.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineCountArgs} args - Arguments to filter Wines to count.
     * @example
     * // Count the number of Wines
     * const count = await prisma.wine.count({
     *   where: {
     *     // ... the filter for the Wines we want to count
     *   }
     * })
    **/
    count<T extends WineCountArgs>(
      args?: Subset<T, WineCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WineCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WineAggregateArgs>(args: Subset<T, WineAggregateArgs>): Prisma.PrismaPromise<GetWineAggregateType<T>>

    /**
     * Group by Wine.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WineGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WineGroupByArgs['orderBy'] }
        : { orderBy?: WineGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WineGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWineGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wine model
   */
  readonly fields: WineFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wine.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WineClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoria<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviews<T extends Wine$reviewsArgs<ExtArgs> = {}>(args?: Subset<T, Wine$reviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany"> | Null>
    bottleSizes<T extends Wine$bottleSizesArgs<ExtArgs> = {}>(args?: Subset<T, Wine$bottleSizesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findMany"> | Null>
    WineBottleSize<T extends Wine$WineBottleSizeArgs<ExtArgs> = {}>(args?: Subset<T, Wine$WineBottleSizeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wine model
   */ 
  interface WineFieldRefs {
    readonly wine_id: FieldRef<"Wine", 'Int'>
    readonly nome: FieldRef<"Wine", 'String'>
    readonly descricao: FieldRef<"Wine", 'String'>
    readonly preco: FieldRef<"Wine", 'Float'>
    readonly imagem: FieldRef<"Wine", 'String'>
    readonly emPromocao: FieldRef<"Wine", 'Boolean'>
    readonly precoPromocao: FieldRef<"Wine", 'Float'>
    readonly emDestaque: FieldRef<"Wine", 'Boolean'>
    readonly descricaoDestaque: FieldRef<"Wine", 'String'>
    readonly categoriaId: FieldRef<"Wine", 'Int'>
    readonly averageRating: FieldRef<"Wine", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Wine findUnique
   */
  export type WineFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where: WineWhereUniqueInput
  }

  /**
   * Wine findUniqueOrThrow
   */
  export type WineFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where: WineWhereUniqueInput
  }

  /**
   * Wine findFirst
   */
  export type WineFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wines.
     */
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }

  /**
   * Wine findFirstOrThrow
   */
  export type WineFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wine to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wines.
     */
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }

  /**
   * Wine findMany
   */
  export type WineFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter, which Wines to fetch.
     */
    where?: WineWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wines to fetch.
     */
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wines.
     */
    cursor?: WineWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wines from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wines.
     */
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }

  /**
   * Wine create
   */
  export type WineCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The data needed to create a Wine.
     */
    data: XOR<WineCreateInput, WineUncheckedCreateInput>
  }

  /**
   * Wine createMany
   */
  export type WineCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wines.
     */
    data: WineCreateManyInput | WineCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wine createManyAndReturn
   */
  export type WineCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Wines.
     */
    data: WineCreateManyInput | WineCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wine update
   */
  export type WineUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The data needed to update a Wine.
     */
    data: XOR<WineUpdateInput, WineUncheckedUpdateInput>
    /**
     * Choose, which Wine to update.
     */
    where: WineWhereUniqueInput
  }

  /**
   * Wine updateMany
   */
  export type WineUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wines.
     */
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyInput>
    /**
     * Filter which Wines to update
     */
    where?: WineWhereInput
  }

  /**
   * Wine upsert
   */
  export type WineUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * The filter to search for the Wine to update in case it exists.
     */
    where: WineWhereUniqueInput
    /**
     * In case the Wine found by the `where` argument doesn't exist, create a new Wine with this data.
     */
    create: XOR<WineCreateInput, WineUncheckedCreateInput>
    /**
     * In case the Wine was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WineUpdateInput, WineUncheckedUpdateInput>
  }

  /**
   * Wine delete
   */
  export type WineDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    /**
     * Filter which Wine to delete.
     */
    where: WineWhereUniqueInput
  }

  /**
   * Wine deleteMany
   */
  export type WineDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wines to delete
     */
    where?: WineWhereInput
  }

  /**
   * Wine.reviews
   */
  export type Wine$reviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    cursor?: ReviewWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Wine.bottleSizes
   */
  export type Wine$bottleSizesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    where?: BottleSizeWhereInput
    orderBy?: BottleSizeOrderByWithRelationInput | BottleSizeOrderByWithRelationInput[]
    cursor?: BottleSizeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BottleSizeScalarFieldEnum | BottleSizeScalarFieldEnum[]
  }

  /**
   * Wine.WineBottleSize
   */
  export type Wine$WineBottleSizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    where?: WineBottleSizeWhereInput
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    cursor?: WineBottleSizeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineBottleSizeScalarFieldEnum | WineBottleSizeScalarFieldEnum[]
  }

  /**
   * Wine without action
   */
  export type WineDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
  }


  /**
   * Model BottleSize
   */

  export type AggregateBottleSize = {
    _count: BottleSizeCountAggregateOutputType | null
    _avg: BottleSizeAvgAggregateOutputType | null
    _sum: BottleSizeSumAggregateOutputType | null
    _min: BottleSizeMinAggregateOutputType | null
    _max: BottleSizeMaxAggregateOutputType | null
  }

  export type BottleSizeAvgAggregateOutputType = {
    bottle_size_id: number | null
    tamanho: number | null
  }

  export type BottleSizeSumAggregateOutputType = {
    bottle_size_id: number | null
    tamanho: number | null
  }

  export type BottleSizeMinAggregateOutputType = {
    bottle_size_id: number | null
    tamanho: number | null
  }

  export type BottleSizeMaxAggregateOutputType = {
    bottle_size_id: number | null
    tamanho: number | null
  }

  export type BottleSizeCountAggregateOutputType = {
    bottle_size_id: number
    tamanho: number
    _all: number
  }


  export type BottleSizeAvgAggregateInputType = {
    bottle_size_id?: true
    tamanho?: true
  }

  export type BottleSizeSumAggregateInputType = {
    bottle_size_id?: true
    tamanho?: true
  }

  export type BottleSizeMinAggregateInputType = {
    bottle_size_id?: true
    tamanho?: true
  }

  export type BottleSizeMaxAggregateInputType = {
    bottle_size_id?: true
    tamanho?: true
  }

  export type BottleSizeCountAggregateInputType = {
    bottle_size_id?: true
    tamanho?: true
    _all?: true
  }

  export type BottleSizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BottleSize to aggregate.
     */
    where?: BottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BottleSizes to fetch.
     */
    orderBy?: BottleSizeOrderByWithRelationInput | BottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BottleSizes
    **/
    _count?: true | BottleSizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BottleSizeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BottleSizeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BottleSizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BottleSizeMaxAggregateInputType
  }

  export type GetBottleSizeAggregateType<T extends BottleSizeAggregateArgs> = {
        [P in keyof T & keyof AggregateBottleSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBottleSize[P]>
      : GetScalarType<T[P], AggregateBottleSize[P]>
  }




  export type BottleSizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BottleSizeWhereInput
    orderBy?: BottleSizeOrderByWithAggregationInput | BottleSizeOrderByWithAggregationInput[]
    by: BottleSizeScalarFieldEnum[] | BottleSizeScalarFieldEnum
    having?: BottleSizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BottleSizeCountAggregateInputType | true
    _avg?: BottleSizeAvgAggregateInputType
    _sum?: BottleSizeSumAggregateInputType
    _min?: BottleSizeMinAggregateInputType
    _max?: BottleSizeMaxAggregateInputType
  }

  export type BottleSizeGroupByOutputType = {
    bottle_size_id: number
    tamanho: number
    _count: BottleSizeCountAggregateOutputType | null
    _avg: BottleSizeAvgAggregateOutputType | null
    _sum: BottleSizeSumAggregateOutputType | null
    _min: BottleSizeMinAggregateOutputType | null
    _max: BottleSizeMaxAggregateOutputType | null
  }

  type GetBottleSizeGroupByPayload<T extends BottleSizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BottleSizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BottleSizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BottleSizeGroupByOutputType[P]>
            : GetScalarType<T[P], BottleSizeGroupByOutputType[P]>
        }
      >
    >


  export type BottleSizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bottle_size_id?: boolean
    tamanho?: boolean
    wines?: boolean | BottleSize$winesArgs<ExtArgs>
    WineBottleSize?: boolean | BottleSize$WineBottleSizeArgs<ExtArgs>
    _count?: boolean | BottleSizeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bottleSize"]>

  export type BottleSizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    bottle_size_id?: boolean
    tamanho?: boolean
  }, ExtArgs["result"]["bottleSize"]>

  export type BottleSizeSelectScalar = {
    bottle_size_id?: boolean
    tamanho?: boolean
  }

  export type BottleSizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wines?: boolean | BottleSize$winesArgs<ExtArgs>
    WineBottleSize?: boolean | BottleSize$WineBottleSizeArgs<ExtArgs>
    _count?: boolean | BottleSizeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BottleSizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $BottleSizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BottleSize"
    objects: {
      wines: Prisma.$WinePayload<ExtArgs>[]
      WineBottleSize: Prisma.$WineBottleSizePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      bottle_size_id: number
      tamanho: number
    }, ExtArgs["result"]["bottleSize"]>
    composites: {}
  }

  type BottleSizeGetPayload<S extends boolean | null | undefined | BottleSizeDefaultArgs> = $Result.GetResult<Prisma.$BottleSizePayload, S>

  type BottleSizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BottleSizeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BottleSizeCountAggregateInputType | true
    }

  export interface BottleSizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BottleSize'], meta: { name: 'BottleSize' } }
    /**
     * Find zero or one BottleSize that matches the filter.
     * @param {BottleSizeFindUniqueArgs} args - Arguments to find a BottleSize
     * @example
     * // Get one BottleSize
     * const bottleSize = await prisma.bottleSize.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BottleSizeFindUniqueArgs>(args: SelectSubset<T, BottleSizeFindUniqueArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one BottleSize that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BottleSizeFindUniqueOrThrowArgs} args - Arguments to find a BottleSize
     * @example
     * // Get one BottleSize
     * const bottleSize = await prisma.bottleSize.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BottleSizeFindUniqueOrThrowArgs>(args: SelectSubset<T, BottleSizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first BottleSize that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeFindFirstArgs} args - Arguments to find a BottleSize
     * @example
     * // Get one BottleSize
     * const bottleSize = await prisma.bottleSize.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BottleSizeFindFirstArgs>(args?: SelectSubset<T, BottleSizeFindFirstArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first BottleSize that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeFindFirstOrThrowArgs} args - Arguments to find a BottleSize
     * @example
     * // Get one BottleSize
     * const bottleSize = await prisma.bottleSize.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BottleSizeFindFirstOrThrowArgs>(args?: SelectSubset<T, BottleSizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more BottleSizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BottleSizes
     * const bottleSizes = await prisma.bottleSize.findMany()
     * 
     * // Get first 10 BottleSizes
     * const bottleSizes = await prisma.bottleSize.findMany({ take: 10 })
     * 
     * // Only select the `bottle_size_id`
     * const bottleSizeWithBottle_size_idOnly = await prisma.bottleSize.findMany({ select: { bottle_size_id: true } })
     * 
     */
    findMany<T extends BottleSizeFindManyArgs>(args?: SelectSubset<T, BottleSizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a BottleSize.
     * @param {BottleSizeCreateArgs} args - Arguments to create a BottleSize.
     * @example
     * // Create one BottleSize
     * const BottleSize = await prisma.bottleSize.create({
     *   data: {
     *     // ... data to create a BottleSize
     *   }
     * })
     * 
     */
    create<T extends BottleSizeCreateArgs>(args: SelectSubset<T, BottleSizeCreateArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many BottleSizes.
     * @param {BottleSizeCreateManyArgs} args - Arguments to create many BottleSizes.
     * @example
     * // Create many BottleSizes
     * const bottleSize = await prisma.bottleSize.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BottleSizeCreateManyArgs>(args?: SelectSubset<T, BottleSizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BottleSizes and returns the data saved in the database.
     * @param {BottleSizeCreateManyAndReturnArgs} args - Arguments to create many BottleSizes.
     * @example
     * // Create many BottleSizes
     * const bottleSize = await prisma.bottleSize.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BottleSizes and only return the `bottle_size_id`
     * const bottleSizeWithBottle_size_idOnly = await prisma.bottleSize.createManyAndReturn({ 
     *   select: { bottle_size_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BottleSizeCreateManyAndReturnArgs>(args?: SelectSubset<T, BottleSizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a BottleSize.
     * @param {BottleSizeDeleteArgs} args - Arguments to delete one BottleSize.
     * @example
     * // Delete one BottleSize
     * const BottleSize = await prisma.bottleSize.delete({
     *   where: {
     *     // ... filter to delete one BottleSize
     *   }
     * })
     * 
     */
    delete<T extends BottleSizeDeleteArgs>(args: SelectSubset<T, BottleSizeDeleteArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one BottleSize.
     * @param {BottleSizeUpdateArgs} args - Arguments to update one BottleSize.
     * @example
     * // Update one BottleSize
     * const bottleSize = await prisma.bottleSize.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BottleSizeUpdateArgs>(args: SelectSubset<T, BottleSizeUpdateArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more BottleSizes.
     * @param {BottleSizeDeleteManyArgs} args - Arguments to filter BottleSizes to delete.
     * @example
     * // Delete a few BottleSizes
     * const { count } = await prisma.bottleSize.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BottleSizeDeleteManyArgs>(args?: SelectSubset<T, BottleSizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BottleSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BottleSizes
     * const bottleSize = await prisma.bottleSize.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BottleSizeUpdateManyArgs>(args: SelectSubset<T, BottleSizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BottleSize.
     * @param {BottleSizeUpsertArgs} args - Arguments to update or create a BottleSize.
     * @example
     * // Update or create a BottleSize
     * const bottleSize = await prisma.bottleSize.upsert({
     *   create: {
     *     // ... data to create a BottleSize
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BottleSize we want to update
     *   }
     * })
     */
    upsert<T extends BottleSizeUpsertArgs>(args: SelectSubset<T, BottleSizeUpsertArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of BottleSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeCountArgs} args - Arguments to filter BottleSizes to count.
     * @example
     * // Count the number of BottleSizes
     * const count = await prisma.bottleSize.count({
     *   where: {
     *     // ... the filter for the BottleSizes we want to count
     *   }
     * })
    **/
    count<T extends BottleSizeCountArgs>(
      args?: Subset<T, BottleSizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BottleSizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BottleSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BottleSizeAggregateArgs>(args: Subset<T, BottleSizeAggregateArgs>): Prisma.PrismaPromise<GetBottleSizeAggregateType<T>>

    /**
     * Group by BottleSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BottleSizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BottleSizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BottleSizeGroupByArgs['orderBy'] }
        : { orderBy?: BottleSizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BottleSizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBottleSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BottleSize model
   */
  readonly fields: BottleSizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BottleSize.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BottleSizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wines<T extends BottleSize$winesArgs<ExtArgs> = {}>(args?: Subset<T, BottleSize$winesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findMany"> | Null>
    WineBottleSize<T extends BottleSize$WineBottleSizeArgs<ExtArgs> = {}>(args?: Subset<T, BottleSize$WineBottleSizeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BottleSize model
   */ 
  interface BottleSizeFieldRefs {
    readonly bottle_size_id: FieldRef<"BottleSize", 'Int'>
    readonly tamanho: FieldRef<"BottleSize", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * BottleSize findUnique
   */
  export type BottleSizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which BottleSize to fetch.
     */
    where: BottleSizeWhereUniqueInput
  }

  /**
   * BottleSize findUniqueOrThrow
   */
  export type BottleSizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which BottleSize to fetch.
     */
    where: BottleSizeWhereUniqueInput
  }

  /**
   * BottleSize findFirst
   */
  export type BottleSizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which BottleSize to fetch.
     */
    where?: BottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BottleSizes to fetch.
     */
    orderBy?: BottleSizeOrderByWithRelationInput | BottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BottleSizes.
     */
    cursor?: BottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BottleSizes.
     */
    distinct?: BottleSizeScalarFieldEnum | BottleSizeScalarFieldEnum[]
  }

  /**
   * BottleSize findFirstOrThrow
   */
  export type BottleSizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which BottleSize to fetch.
     */
    where?: BottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BottleSizes to fetch.
     */
    orderBy?: BottleSizeOrderByWithRelationInput | BottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BottleSizes.
     */
    cursor?: BottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BottleSizes.
     */
    distinct?: BottleSizeScalarFieldEnum | BottleSizeScalarFieldEnum[]
  }

  /**
   * BottleSize findMany
   */
  export type BottleSizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which BottleSizes to fetch.
     */
    where?: BottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BottleSizes to fetch.
     */
    orderBy?: BottleSizeOrderByWithRelationInput | BottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BottleSizes.
     */
    cursor?: BottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BottleSizes.
     */
    skip?: number
    distinct?: BottleSizeScalarFieldEnum | BottleSizeScalarFieldEnum[]
  }

  /**
   * BottleSize create
   */
  export type BottleSizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * The data needed to create a BottleSize.
     */
    data: XOR<BottleSizeCreateInput, BottleSizeUncheckedCreateInput>
  }

  /**
   * BottleSize createMany
   */
  export type BottleSizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BottleSizes.
     */
    data: BottleSizeCreateManyInput | BottleSizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BottleSize createManyAndReturn
   */
  export type BottleSizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BottleSizes.
     */
    data: BottleSizeCreateManyInput | BottleSizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BottleSize update
   */
  export type BottleSizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * The data needed to update a BottleSize.
     */
    data: XOR<BottleSizeUpdateInput, BottleSizeUncheckedUpdateInput>
    /**
     * Choose, which BottleSize to update.
     */
    where: BottleSizeWhereUniqueInput
  }

  /**
   * BottleSize updateMany
   */
  export type BottleSizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BottleSizes.
     */
    data: XOR<BottleSizeUpdateManyMutationInput, BottleSizeUncheckedUpdateManyInput>
    /**
     * Filter which BottleSizes to update
     */
    where?: BottleSizeWhereInput
  }

  /**
   * BottleSize upsert
   */
  export type BottleSizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * The filter to search for the BottleSize to update in case it exists.
     */
    where: BottleSizeWhereUniqueInput
    /**
     * In case the BottleSize found by the `where` argument doesn't exist, create a new BottleSize with this data.
     */
    create: XOR<BottleSizeCreateInput, BottleSizeUncheckedCreateInput>
    /**
     * In case the BottleSize was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BottleSizeUpdateInput, BottleSizeUncheckedUpdateInput>
  }

  /**
   * BottleSize delete
   */
  export type BottleSizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
    /**
     * Filter which BottleSize to delete.
     */
    where: BottleSizeWhereUniqueInput
  }

  /**
   * BottleSize deleteMany
   */
  export type BottleSizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BottleSizes to delete
     */
    where?: BottleSizeWhereInput
  }

  /**
   * BottleSize.wines
   */
  export type BottleSize$winesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wine
     */
    select?: WineSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineInclude<ExtArgs> | null
    where?: WineWhereInput
    orderBy?: WineOrderByWithRelationInput | WineOrderByWithRelationInput[]
    cursor?: WineWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineScalarFieldEnum | WineScalarFieldEnum[]
  }

  /**
   * BottleSize.WineBottleSize
   */
  export type BottleSize$WineBottleSizeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    where?: WineBottleSizeWhereInput
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    cursor?: WineBottleSizeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WineBottleSizeScalarFieldEnum | WineBottleSizeScalarFieldEnum[]
  }

  /**
   * BottleSize without action
   */
  export type BottleSizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BottleSize
     */
    select?: BottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BottleSizeInclude<ExtArgs> | null
  }


  /**
   * Model WineBottleSize
   */

  export type AggregateWineBottleSize = {
    _count: WineBottleSizeCountAggregateOutputType | null
    _avg: WineBottleSizeAvgAggregateOutputType | null
    _sum: WineBottleSizeSumAggregateOutputType | null
    _min: WineBottleSizeMinAggregateOutputType | null
    _max: WineBottleSizeMaxAggregateOutputType | null
  }

  export type WineBottleSizeAvgAggregateOutputType = {
    wine_id: number | null
    bottle_size_id: number | null
  }

  export type WineBottleSizeSumAggregateOutputType = {
    wine_id: number | null
    bottle_size_id: number | null
  }

  export type WineBottleSizeMinAggregateOutputType = {
    wine_id: number | null
    bottle_size_id: number | null
  }

  export type WineBottleSizeMaxAggregateOutputType = {
    wine_id: number | null
    bottle_size_id: number | null
  }

  export type WineBottleSizeCountAggregateOutputType = {
    wine_id: number
    bottle_size_id: number
    _all: number
  }


  export type WineBottleSizeAvgAggregateInputType = {
    wine_id?: true
    bottle_size_id?: true
  }

  export type WineBottleSizeSumAggregateInputType = {
    wine_id?: true
    bottle_size_id?: true
  }

  export type WineBottleSizeMinAggregateInputType = {
    wine_id?: true
    bottle_size_id?: true
  }

  export type WineBottleSizeMaxAggregateInputType = {
    wine_id?: true
    bottle_size_id?: true
  }

  export type WineBottleSizeCountAggregateInputType = {
    wine_id?: true
    bottle_size_id?: true
    _all?: true
  }

  export type WineBottleSizeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WineBottleSize to aggregate.
     */
    where?: WineBottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WineBottleSizes to fetch.
     */
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WineBottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WineBottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WineBottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WineBottleSizes
    **/
    _count?: true | WineBottleSizeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WineBottleSizeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WineBottleSizeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WineBottleSizeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WineBottleSizeMaxAggregateInputType
  }

  export type GetWineBottleSizeAggregateType<T extends WineBottleSizeAggregateArgs> = {
        [P in keyof T & keyof AggregateWineBottleSize]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWineBottleSize[P]>
      : GetScalarType<T[P], AggregateWineBottleSize[P]>
  }




  export type WineBottleSizeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WineBottleSizeWhereInput
    orderBy?: WineBottleSizeOrderByWithAggregationInput | WineBottleSizeOrderByWithAggregationInput[]
    by: WineBottleSizeScalarFieldEnum[] | WineBottleSizeScalarFieldEnum
    having?: WineBottleSizeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WineBottleSizeCountAggregateInputType | true
    _avg?: WineBottleSizeAvgAggregateInputType
    _sum?: WineBottleSizeSumAggregateInputType
    _min?: WineBottleSizeMinAggregateInputType
    _max?: WineBottleSizeMaxAggregateInputType
  }

  export type WineBottleSizeGroupByOutputType = {
    wine_id: number
    bottle_size_id: number
    _count: WineBottleSizeCountAggregateOutputType | null
    _avg: WineBottleSizeAvgAggregateOutputType | null
    _sum: WineBottleSizeSumAggregateOutputType | null
    _min: WineBottleSizeMinAggregateOutputType | null
    _max: WineBottleSizeMaxAggregateOutputType | null
  }

  type GetWineBottleSizeGroupByPayload<T extends WineBottleSizeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WineBottleSizeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WineBottleSizeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WineBottleSizeGroupByOutputType[P]>
            : GetScalarType<T[P], WineBottleSizeGroupByOutputType[P]>
        }
      >
    >


  export type WineBottleSizeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wine_id?: boolean
    bottle_size_id?: boolean
    wine?: boolean | WineDefaultArgs<ExtArgs>
    bottleSize?: boolean | BottleSizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wineBottleSize"]>

  export type WineBottleSizeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    wine_id?: boolean
    bottle_size_id?: boolean
    wine?: boolean | WineDefaultArgs<ExtArgs>
    bottleSize?: boolean | BottleSizeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wineBottleSize"]>

  export type WineBottleSizeSelectScalar = {
    wine_id?: boolean
    bottle_size_id?: boolean
  }

  export type WineBottleSizeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wine?: boolean | WineDefaultArgs<ExtArgs>
    bottleSize?: boolean | BottleSizeDefaultArgs<ExtArgs>
  }
  export type WineBottleSizeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wine?: boolean | WineDefaultArgs<ExtArgs>
    bottleSize?: boolean | BottleSizeDefaultArgs<ExtArgs>
  }

  export type $WineBottleSizePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WineBottleSize"
    objects: {
      wine: Prisma.$WinePayload<ExtArgs>
      bottleSize: Prisma.$BottleSizePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      wine_id: number
      bottle_size_id: number
    }, ExtArgs["result"]["wineBottleSize"]>
    composites: {}
  }

  type WineBottleSizeGetPayload<S extends boolean | null | undefined | WineBottleSizeDefaultArgs> = $Result.GetResult<Prisma.$WineBottleSizePayload, S>

  type WineBottleSizeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WineBottleSizeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WineBottleSizeCountAggregateInputType | true
    }

  export interface WineBottleSizeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WineBottleSize'], meta: { name: 'WineBottleSize' } }
    /**
     * Find zero or one WineBottleSize that matches the filter.
     * @param {WineBottleSizeFindUniqueArgs} args - Arguments to find a WineBottleSize
     * @example
     * // Get one WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WineBottleSizeFindUniqueArgs>(args: SelectSubset<T, WineBottleSizeFindUniqueArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WineBottleSize that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WineBottleSizeFindUniqueOrThrowArgs} args - Arguments to find a WineBottleSize
     * @example
     * // Get one WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WineBottleSizeFindUniqueOrThrowArgs>(args: SelectSubset<T, WineBottleSizeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WineBottleSize that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeFindFirstArgs} args - Arguments to find a WineBottleSize
     * @example
     * // Get one WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WineBottleSizeFindFirstArgs>(args?: SelectSubset<T, WineBottleSizeFindFirstArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WineBottleSize that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeFindFirstOrThrowArgs} args - Arguments to find a WineBottleSize
     * @example
     * // Get one WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WineBottleSizeFindFirstOrThrowArgs>(args?: SelectSubset<T, WineBottleSizeFindFirstOrThrowArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WineBottleSizes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WineBottleSizes
     * const wineBottleSizes = await prisma.wineBottleSize.findMany()
     * 
     * // Get first 10 WineBottleSizes
     * const wineBottleSizes = await prisma.wineBottleSize.findMany({ take: 10 })
     * 
     * // Only select the `wine_id`
     * const wineBottleSizeWithWine_idOnly = await prisma.wineBottleSize.findMany({ select: { wine_id: true } })
     * 
     */
    findMany<T extends WineBottleSizeFindManyArgs>(args?: SelectSubset<T, WineBottleSizeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WineBottleSize.
     * @param {WineBottleSizeCreateArgs} args - Arguments to create a WineBottleSize.
     * @example
     * // Create one WineBottleSize
     * const WineBottleSize = await prisma.wineBottleSize.create({
     *   data: {
     *     // ... data to create a WineBottleSize
     *   }
     * })
     * 
     */
    create<T extends WineBottleSizeCreateArgs>(args: SelectSubset<T, WineBottleSizeCreateArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WineBottleSizes.
     * @param {WineBottleSizeCreateManyArgs} args - Arguments to create many WineBottleSizes.
     * @example
     * // Create many WineBottleSizes
     * const wineBottleSize = await prisma.wineBottleSize.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WineBottleSizeCreateManyArgs>(args?: SelectSubset<T, WineBottleSizeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WineBottleSizes and returns the data saved in the database.
     * @param {WineBottleSizeCreateManyAndReturnArgs} args - Arguments to create many WineBottleSizes.
     * @example
     * // Create many WineBottleSizes
     * const wineBottleSize = await prisma.wineBottleSize.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WineBottleSizes and only return the `wine_id`
     * const wineBottleSizeWithWine_idOnly = await prisma.wineBottleSize.createManyAndReturn({ 
     *   select: { wine_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WineBottleSizeCreateManyAndReturnArgs>(args?: SelectSubset<T, WineBottleSizeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WineBottleSize.
     * @param {WineBottleSizeDeleteArgs} args - Arguments to delete one WineBottleSize.
     * @example
     * // Delete one WineBottleSize
     * const WineBottleSize = await prisma.wineBottleSize.delete({
     *   where: {
     *     // ... filter to delete one WineBottleSize
     *   }
     * })
     * 
     */
    delete<T extends WineBottleSizeDeleteArgs>(args: SelectSubset<T, WineBottleSizeDeleteArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WineBottleSize.
     * @param {WineBottleSizeUpdateArgs} args - Arguments to update one WineBottleSize.
     * @example
     * // Update one WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WineBottleSizeUpdateArgs>(args: SelectSubset<T, WineBottleSizeUpdateArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WineBottleSizes.
     * @param {WineBottleSizeDeleteManyArgs} args - Arguments to filter WineBottleSizes to delete.
     * @example
     * // Delete a few WineBottleSizes
     * const { count } = await prisma.wineBottleSize.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WineBottleSizeDeleteManyArgs>(args?: SelectSubset<T, WineBottleSizeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WineBottleSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WineBottleSizes
     * const wineBottleSize = await prisma.wineBottleSize.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WineBottleSizeUpdateManyArgs>(args: SelectSubset<T, WineBottleSizeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WineBottleSize.
     * @param {WineBottleSizeUpsertArgs} args - Arguments to update or create a WineBottleSize.
     * @example
     * // Update or create a WineBottleSize
     * const wineBottleSize = await prisma.wineBottleSize.upsert({
     *   create: {
     *     // ... data to create a WineBottleSize
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WineBottleSize we want to update
     *   }
     * })
     */
    upsert<T extends WineBottleSizeUpsertArgs>(args: SelectSubset<T, WineBottleSizeUpsertArgs<ExtArgs>>): Prisma__WineBottleSizeClient<$Result.GetResult<Prisma.$WineBottleSizePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WineBottleSizes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeCountArgs} args - Arguments to filter WineBottleSizes to count.
     * @example
     * // Count the number of WineBottleSizes
     * const count = await prisma.wineBottleSize.count({
     *   where: {
     *     // ... the filter for the WineBottleSizes we want to count
     *   }
     * })
    **/
    count<T extends WineBottleSizeCountArgs>(
      args?: Subset<T, WineBottleSizeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WineBottleSizeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WineBottleSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WineBottleSizeAggregateArgs>(args: Subset<T, WineBottleSizeAggregateArgs>): Prisma.PrismaPromise<GetWineBottleSizeAggregateType<T>>

    /**
     * Group by WineBottleSize.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WineBottleSizeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WineBottleSizeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WineBottleSizeGroupByArgs['orderBy'] }
        : { orderBy?: WineBottleSizeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WineBottleSizeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWineBottleSizeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WineBottleSize model
   */
  readonly fields: WineBottleSizeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WineBottleSize.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WineBottleSizeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wine<T extends WineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WineDefaultArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    bottleSize<T extends BottleSizeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BottleSizeDefaultArgs<ExtArgs>>): Prisma__BottleSizeClient<$Result.GetResult<Prisma.$BottleSizePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WineBottleSize model
   */ 
  interface WineBottleSizeFieldRefs {
    readonly wine_id: FieldRef<"WineBottleSize", 'Int'>
    readonly bottle_size_id: FieldRef<"WineBottleSize", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * WineBottleSize findUnique
   */
  export type WineBottleSizeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which WineBottleSize to fetch.
     */
    where: WineBottleSizeWhereUniqueInput
  }

  /**
   * WineBottleSize findUniqueOrThrow
   */
  export type WineBottleSizeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which WineBottleSize to fetch.
     */
    where: WineBottleSizeWhereUniqueInput
  }

  /**
   * WineBottleSize findFirst
   */
  export type WineBottleSizeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which WineBottleSize to fetch.
     */
    where?: WineBottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WineBottleSizes to fetch.
     */
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WineBottleSizes.
     */
    cursor?: WineBottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WineBottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WineBottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WineBottleSizes.
     */
    distinct?: WineBottleSizeScalarFieldEnum | WineBottleSizeScalarFieldEnum[]
  }

  /**
   * WineBottleSize findFirstOrThrow
   */
  export type WineBottleSizeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which WineBottleSize to fetch.
     */
    where?: WineBottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WineBottleSizes to fetch.
     */
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WineBottleSizes.
     */
    cursor?: WineBottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WineBottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WineBottleSizes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WineBottleSizes.
     */
    distinct?: WineBottleSizeScalarFieldEnum | WineBottleSizeScalarFieldEnum[]
  }

  /**
   * WineBottleSize findMany
   */
  export type WineBottleSizeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter, which WineBottleSizes to fetch.
     */
    where?: WineBottleSizeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WineBottleSizes to fetch.
     */
    orderBy?: WineBottleSizeOrderByWithRelationInput | WineBottleSizeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WineBottleSizes.
     */
    cursor?: WineBottleSizeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WineBottleSizes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WineBottleSizes.
     */
    skip?: number
    distinct?: WineBottleSizeScalarFieldEnum | WineBottleSizeScalarFieldEnum[]
  }

  /**
   * WineBottleSize create
   */
  export type WineBottleSizeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * The data needed to create a WineBottleSize.
     */
    data: XOR<WineBottleSizeCreateInput, WineBottleSizeUncheckedCreateInput>
  }

  /**
   * WineBottleSize createMany
   */
  export type WineBottleSizeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WineBottleSizes.
     */
    data: WineBottleSizeCreateManyInput | WineBottleSizeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WineBottleSize createManyAndReturn
   */
  export type WineBottleSizeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WineBottleSizes.
     */
    data: WineBottleSizeCreateManyInput | WineBottleSizeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WineBottleSize update
   */
  export type WineBottleSizeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * The data needed to update a WineBottleSize.
     */
    data: XOR<WineBottleSizeUpdateInput, WineBottleSizeUncheckedUpdateInput>
    /**
     * Choose, which WineBottleSize to update.
     */
    where: WineBottleSizeWhereUniqueInput
  }

  /**
   * WineBottleSize updateMany
   */
  export type WineBottleSizeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WineBottleSizes.
     */
    data: XOR<WineBottleSizeUpdateManyMutationInput, WineBottleSizeUncheckedUpdateManyInput>
    /**
     * Filter which WineBottleSizes to update
     */
    where?: WineBottleSizeWhereInput
  }

  /**
   * WineBottleSize upsert
   */
  export type WineBottleSizeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * The filter to search for the WineBottleSize to update in case it exists.
     */
    where: WineBottleSizeWhereUniqueInput
    /**
     * In case the WineBottleSize found by the `where` argument doesn't exist, create a new WineBottleSize with this data.
     */
    create: XOR<WineBottleSizeCreateInput, WineBottleSizeUncheckedCreateInput>
    /**
     * In case the WineBottleSize was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WineBottleSizeUpdateInput, WineBottleSizeUncheckedUpdateInput>
  }

  /**
   * WineBottleSize delete
   */
  export type WineBottleSizeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
    /**
     * Filter which WineBottleSize to delete.
     */
    where: WineBottleSizeWhereUniqueInput
  }

  /**
   * WineBottleSize deleteMany
   */
  export type WineBottleSizeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WineBottleSizes to delete
     */
    where?: WineBottleSizeWhereInput
  }

  /**
   * WineBottleSize without action
   */
  export type WineBottleSizeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WineBottleSize
     */
    select?: WineBottleSizeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WineBottleSizeInclude<ExtArgs> | null
  }


  /**
   * Model Review
   */

  export type AggregateReview = {
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  export type ReviewAvgAggregateOutputType = {
    review_id: number | null
    user_id: number | null
    wine_id: number | null
    rating: number | null
  }

  export type ReviewSumAggregateOutputType = {
    review_id: number | null
    user_id: number | null
    wine_id: number | null
    rating: number | null
  }

  export type ReviewMinAggregateOutputType = {
    review_id: number | null
    user_id: number | null
    wine_id: number | null
    rating: number | null
  }

  export type ReviewMaxAggregateOutputType = {
    review_id: number | null
    user_id: number | null
    wine_id: number | null
    rating: number | null
  }

  export type ReviewCountAggregateOutputType = {
    review_id: number
    user_id: number
    wine_id: number
    rating: number
    _all: number
  }


  export type ReviewAvgAggregateInputType = {
    review_id?: true
    user_id?: true
    wine_id?: true
    rating?: true
  }

  export type ReviewSumAggregateInputType = {
    review_id?: true
    user_id?: true
    wine_id?: true
    rating?: true
  }

  export type ReviewMinAggregateInputType = {
    review_id?: true
    user_id?: true
    wine_id?: true
    rating?: true
  }

  export type ReviewMaxAggregateInputType = {
    review_id?: true
    user_id?: true
    wine_id?: true
    rating?: true
  }

  export type ReviewCountAggregateInputType = {
    review_id?: true
    user_id?: true
    wine_id?: true
    rating?: true
    _all?: true
  }

  export type ReviewAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Review to aggregate.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reviews
    **/
    _count?: true | ReviewCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReviewAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReviewSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReviewMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReviewMaxAggregateInputType
  }

  export type GetReviewAggregateType<T extends ReviewAggregateArgs> = {
        [P in keyof T & keyof AggregateReview]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReview[P]>
      : GetScalarType<T[P], AggregateReview[P]>
  }




  export type ReviewGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReviewWhereInput
    orderBy?: ReviewOrderByWithAggregationInput | ReviewOrderByWithAggregationInput[]
    by: ReviewScalarFieldEnum[] | ReviewScalarFieldEnum
    having?: ReviewScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReviewCountAggregateInputType | true
    _avg?: ReviewAvgAggregateInputType
    _sum?: ReviewSumAggregateInputType
    _min?: ReviewMinAggregateInputType
    _max?: ReviewMaxAggregateInputType
  }

  export type ReviewGroupByOutputType = {
    review_id: number
    user_id: number
    wine_id: number
    rating: number
    _count: ReviewCountAggregateOutputType | null
    _avg: ReviewAvgAggregateOutputType | null
    _sum: ReviewSumAggregateOutputType | null
    _min: ReviewMinAggregateOutputType | null
    _max: ReviewMaxAggregateOutputType | null
  }

  type GetReviewGroupByPayload<T extends ReviewGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReviewGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReviewGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReviewGroupByOutputType[P]>
            : GetScalarType<T[P], ReviewGroupByOutputType[P]>
        }
      >
    >


  export type ReviewSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    review_id?: boolean
    user_id?: boolean
    wine_id?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wine?: boolean | WineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    review_id?: boolean
    user_id?: boolean
    wine_id?: boolean
    rating?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    wine?: boolean | WineDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["review"]>

  export type ReviewSelectScalar = {
    review_id?: boolean
    user_id?: boolean
    wine_id?: boolean
    rating?: boolean
  }

  export type ReviewInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wine?: boolean | WineDefaultArgs<ExtArgs>
  }
  export type ReviewIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    wine?: boolean | WineDefaultArgs<ExtArgs>
  }

  export type $ReviewPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Review"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      wine: Prisma.$WinePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      review_id: number
      user_id: number
      wine_id: number
      rating: number
    }, ExtArgs["result"]["review"]>
    composites: {}
  }

  type ReviewGetPayload<S extends boolean | null | undefined | ReviewDefaultArgs> = $Result.GetResult<Prisma.$ReviewPayload, S>

  type ReviewCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReviewFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReviewCountAggregateInputType | true
    }

  export interface ReviewDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Review'], meta: { name: 'Review' } }
    /**
     * Find zero or one Review that matches the filter.
     * @param {ReviewFindUniqueArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReviewFindUniqueArgs>(args: SelectSubset<T, ReviewFindUniqueArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Review that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReviewFindUniqueOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReviewFindUniqueOrThrowArgs>(args: SelectSubset<T, ReviewFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Review that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReviewFindFirstArgs>(args?: SelectSubset<T, ReviewFindFirstArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Review that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindFirstOrThrowArgs} args - Arguments to find a Review
     * @example
     * // Get one Review
     * const review = await prisma.review.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReviewFindFirstOrThrowArgs>(args?: SelectSubset<T, ReviewFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reviews that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reviews
     * const reviews = await prisma.review.findMany()
     * 
     * // Get first 10 Reviews
     * const reviews = await prisma.review.findMany({ take: 10 })
     * 
     * // Only select the `review_id`
     * const reviewWithReview_idOnly = await prisma.review.findMany({ select: { review_id: true } })
     * 
     */
    findMany<T extends ReviewFindManyArgs>(args?: SelectSubset<T, ReviewFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Review.
     * @param {ReviewCreateArgs} args - Arguments to create a Review.
     * @example
     * // Create one Review
     * const Review = await prisma.review.create({
     *   data: {
     *     // ... data to create a Review
     *   }
     * })
     * 
     */
    create<T extends ReviewCreateArgs>(args: SelectSubset<T, ReviewCreateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reviews.
     * @param {ReviewCreateManyArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReviewCreateManyArgs>(args?: SelectSubset<T, ReviewCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reviews and returns the data saved in the database.
     * @param {ReviewCreateManyAndReturnArgs} args - Arguments to create many Reviews.
     * @example
     * // Create many Reviews
     * const review = await prisma.review.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reviews and only return the `review_id`
     * const reviewWithReview_idOnly = await prisma.review.createManyAndReturn({ 
     *   select: { review_id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReviewCreateManyAndReturnArgs>(args?: SelectSubset<T, ReviewCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Review.
     * @param {ReviewDeleteArgs} args - Arguments to delete one Review.
     * @example
     * // Delete one Review
     * const Review = await prisma.review.delete({
     *   where: {
     *     // ... filter to delete one Review
     *   }
     * })
     * 
     */
    delete<T extends ReviewDeleteArgs>(args: SelectSubset<T, ReviewDeleteArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Review.
     * @param {ReviewUpdateArgs} args - Arguments to update one Review.
     * @example
     * // Update one Review
     * const review = await prisma.review.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReviewUpdateArgs>(args: SelectSubset<T, ReviewUpdateArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reviews.
     * @param {ReviewDeleteManyArgs} args - Arguments to filter Reviews to delete.
     * @example
     * // Delete a few Reviews
     * const { count } = await prisma.review.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReviewDeleteManyArgs>(args?: SelectSubset<T, ReviewDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reviews
     * const review = await prisma.review.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReviewUpdateManyArgs>(args: SelectSubset<T, ReviewUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Review.
     * @param {ReviewUpsertArgs} args - Arguments to update or create a Review.
     * @example
     * // Update or create a Review
     * const review = await prisma.review.upsert({
     *   create: {
     *     // ... data to create a Review
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Review we want to update
     *   }
     * })
     */
    upsert<T extends ReviewUpsertArgs>(args: SelectSubset<T, ReviewUpsertArgs<ExtArgs>>): Prisma__ReviewClient<$Result.GetResult<Prisma.$ReviewPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reviews.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewCountArgs} args - Arguments to filter Reviews to count.
     * @example
     * // Count the number of Reviews
     * const count = await prisma.review.count({
     *   where: {
     *     // ... the filter for the Reviews we want to count
     *   }
     * })
    **/
    count<T extends ReviewCountArgs>(
      args?: Subset<T, ReviewCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReviewCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReviewAggregateArgs>(args: Subset<T, ReviewAggregateArgs>): Prisma.PrismaPromise<GetReviewAggregateType<T>>

    /**
     * Group by Review.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReviewGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReviewGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReviewGroupByArgs['orderBy'] }
        : { orderBy?: ReviewGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReviewGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReviewGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Review model
   */
  readonly fields: ReviewFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Review.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReviewClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    wine<T extends WineDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WineDefaultArgs<ExtArgs>>): Prisma__WineClient<$Result.GetResult<Prisma.$WinePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Review model
   */ 
  interface ReviewFieldRefs {
    readonly review_id: FieldRef<"Review", 'Int'>
    readonly user_id: FieldRef<"Review", 'Int'>
    readonly wine_id: FieldRef<"Review", 'Int'>
    readonly rating: FieldRef<"Review", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * Review findUnique
   */
  export type ReviewFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findUniqueOrThrow
   */
  export type ReviewFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review findFirst
   */
  export type ReviewFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findFirstOrThrow
   */
  export type ReviewFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Review to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reviews.
     */
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review findMany
   */
  export type ReviewFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter, which Reviews to fetch.
     */
    where?: ReviewWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reviews to fetch.
     */
    orderBy?: ReviewOrderByWithRelationInput | ReviewOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reviews.
     */
    cursor?: ReviewWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reviews from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reviews.
     */
    skip?: number
    distinct?: ReviewScalarFieldEnum | ReviewScalarFieldEnum[]
  }

  /**
   * Review create
   */
  export type ReviewCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to create a Review.
     */
    data: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
  }

  /**
   * Review createMany
   */
  export type ReviewCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Review createManyAndReturn
   */
  export type ReviewCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reviews.
     */
    data: ReviewCreateManyInput | ReviewCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Review update
   */
  export type ReviewUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The data needed to update a Review.
     */
    data: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
    /**
     * Choose, which Review to update.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review updateMany
   */
  export type ReviewUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reviews.
     */
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyInput>
    /**
     * Filter which Reviews to update
     */
    where?: ReviewWhereInput
  }

  /**
   * Review upsert
   */
  export type ReviewUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * The filter to search for the Review to update in case it exists.
     */
    where: ReviewWhereUniqueInput
    /**
     * In case the Review found by the `where` argument doesn't exist, create a new Review with this data.
     */
    create: XOR<ReviewCreateInput, ReviewUncheckedCreateInput>
    /**
     * In case the Review was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReviewUpdateInput, ReviewUncheckedUpdateInput>
  }

  /**
   * Review delete
   */
  export type ReviewDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
    /**
     * Filter which Review to delete.
     */
    where: ReviewWhereUniqueInput
  }

  /**
   * Review deleteMany
   */
  export type ReviewDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reviews to delete
     */
    where?: ReviewWhereInput
  }

  /**
   * Review without action
   */
  export type ReviewDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Review
     */
    select?: ReviewSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReviewInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    email: 'email',
    password: 'password',
    isAdmin: 'isAdmin'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    category_id: 'category_id',
    nome: 'nome'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const WineScalarFieldEnum: {
    wine_id: 'wine_id',
    nome: 'nome',
    descricao: 'descricao',
    preco: 'preco',
    imagem: 'imagem',
    emPromocao: 'emPromocao',
    precoPromocao: 'precoPromocao',
    emDestaque: 'emDestaque',
    descricaoDestaque: 'descricaoDestaque',
    categoriaId: 'categoriaId',
    averageRating: 'averageRating'
  };

  export type WineScalarFieldEnum = (typeof WineScalarFieldEnum)[keyof typeof WineScalarFieldEnum]


  export const BottleSizeScalarFieldEnum: {
    bottle_size_id: 'bottle_size_id',
    tamanho: 'tamanho'
  };

  export type BottleSizeScalarFieldEnum = (typeof BottleSizeScalarFieldEnum)[keyof typeof BottleSizeScalarFieldEnum]


  export const WineBottleSizeScalarFieldEnum: {
    wine_id: 'wine_id',
    bottle_size_id: 'bottle_size_id'
  };

  export type WineBottleSizeScalarFieldEnum = (typeof WineBottleSizeScalarFieldEnum)[keyof typeof WineBottleSizeScalarFieldEnum]


  export const ReviewScalarFieldEnum: {
    review_id: 'review_id',
    user_id: 'user_id',
    wine_id: 'wine_id',
    rating: 'rating'
  };

  export type ReviewScalarFieldEnum = (typeof ReviewScalarFieldEnum)[keyof typeof ReviewScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    nome?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    reviews?: ReviewListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    reviews?: ReviewOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nome?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    isAdmin?: BoolFilter<"User"> | boolean
    reviews?: ReviewListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    nome?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    isAdmin?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    category_id?: IntFilter<"Category"> | number
    nome?: StringFilter<"Category"> | string
    wines?: WineListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    category_id?: SortOrder
    nome?: SortOrder
    wines?: WineOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    category_id?: number
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    nome?: StringFilter<"Category"> | string
    wines?: WineListRelationFilter
  }, "category_id">

  export type CategoryOrderByWithAggregationInput = {
    category_id?: SortOrder
    nome?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _avg?: CategoryAvgOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
    _sum?: CategorySumOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    category_id?: IntWithAggregatesFilter<"Category"> | number
    nome?: StringWithAggregatesFilter<"Category"> | string
  }

  export type WineWhereInput = {
    AND?: WineWhereInput | WineWhereInput[]
    OR?: WineWhereInput[]
    NOT?: WineWhereInput | WineWhereInput[]
    wine_id?: IntFilter<"Wine"> | number
    nome?: StringFilter<"Wine"> | string
    descricao?: StringFilter<"Wine"> | string
    preco?: FloatFilter<"Wine"> | number
    imagem?: StringFilter<"Wine"> | string
    emPromocao?: BoolFilter<"Wine"> | boolean
    precoPromocao?: FloatNullableFilter<"Wine"> | number | null
    emDestaque?: BoolFilter<"Wine"> | boolean
    descricaoDestaque?: StringNullableFilter<"Wine"> | string | null
    categoriaId?: IntFilter<"Wine"> | number
    averageRating?: FloatFilter<"Wine"> | number
    categoria?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    reviews?: ReviewListRelationFilter
    bottleSizes?: BottleSizeListRelationFilter
    WineBottleSize?: WineBottleSizeListRelationFilter
  }

  export type WineOrderByWithRelationInput = {
    wine_id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    emPromocao?: SortOrder
    precoPromocao?: SortOrderInput | SortOrder
    emDestaque?: SortOrder
    descricaoDestaque?: SortOrderInput | SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
    categoria?: CategoryOrderByWithRelationInput
    reviews?: ReviewOrderByRelationAggregateInput
    bottleSizes?: BottleSizeOrderByRelationAggregateInput
    WineBottleSize?: WineBottleSizeOrderByRelationAggregateInput
  }

  export type WineWhereUniqueInput = Prisma.AtLeast<{
    wine_id?: number
    AND?: WineWhereInput | WineWhereInput[]
    OR?: WineWhereInput[]
    NOT?: WineWhereInput | WineWhereInput[]
    nome?: StringFilter<"Wine"> | string
    descricao?: StringFilter<"Wine"> | string
    preco?: FloatFilter<"Wine"> | number
    imagem?: StringFilter<"Wine"> | string
    emPromocao?: BoolFilter<"Wine"> | boolean
    precoPromocao?: FloatNullableFilter<"Wine"> | number | null
    emDestaque?: BoolFilter<"Wine"> | boolean
    descricaoDestaque?: StringNullableFilter<"Wine"> | string | null
    categoriaId?: IntFilter<"Wine"> | number
    averageRating?: FloatFilter<"Wine"> | number
    categoria?: XOR<CategoryScalarRelationFilter, CategoryWhereInput>
    reviews?: ReviewListRelationFilter
    bottleSizes?: BottleSizeListRelationFilter
    WineBottleSize?: WineBottleSizeListRelationFilter
  }, "wine_id">

  export type WineOrderByWithAggregationInput = {
    wine_id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    emPromocao?: SortOrder
    precoPromocao?: SortOrderInput | SortOrder
    emDestaque?: SortOrder
    descricaoDestaque?: SortOrderInput | SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
    _count?: WineCountOrderByAggregateInput
    _avg?: WineAvgOrderByAggregateInput
    _max?: WineMaxOrderByAggregateInput
    _min?: WineMinOrderByAggregateInput
    _sum?: WineSumOrderByAggregateInput
  }

  export type WineScalarWhereWithAggregatesInput = {
    AND?: WineScalarWhereWithAggregatesInput | WineScalarWhereWithAggregatesInput[]
    OR?: WineScalarWhereWithAggregatesInput[]
    NOT?: WineScalarWhereWithAggregatesInput | WineScalarWhereWithAggregatesInput[]
    wine_id?: IntWithAggregatesFilter<"Wine"> | number
    nome?: StringWithAggregatesFilter<"Wine"> | string
    descricao?: StringWithAggregatesFilter<"Wine"> | string
    preco?: FloatWithAggregatesFilter<"Wine"> | number
    imagem?: StringWithAggregatesFilter<"Wine"> | string
    emPromocao?: BoolWithAggregatesFilter<"Wine"> | boolean
    precoPromocao?: FloatNullableWithAggregatesFilter<"Wine"> | number | null
    emDestaque?: BoolWithAggregatesFilter<"Wine"> | boolean
    descricaoDestaque?: StringNullableWithAggregatesFilter<"Wine"> | string | null
    categoriaId?: IntWithAggregatesFilter<"Wine"> | number
    averageRating?: FloatWithAggregatesFilter<"Wine"> | number
  }

  export type BottleSizeWhereInput = {
    AND?: BottleSizeWhereInput | BottleSizeWhereInput[]
    OR?: BottleSizeWhereInput[]
    NOT?: BottleSizeWhereInput | BottleSizeWhereInput[]
    bottle_size_id?: IntFilter<"BottleSize"> | number
    tamanho?: FloatFilter<"BottleSize"> | number
    wines?: WineListRelationFilter
    WineBottleSize?: WineBottleSizeListRelationFilter
  }

  export type BottleSizeOrderByWithRelationInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
    wines?: WineOrderByRelationAggregateInput
    WineBottleSize?: WineBottleSizeOrderByRelationAggregateInput
  }

  export type BottleSizeWhereUniqueInput = Prisma.AtLeast<{
    bottle_size_id?: number
    AND?: BottleSizeWhereInput | BottleSizeWhereInput[]
    OR?: BottleSizeWhereInput[]
    NOT?: BottleSizeWhereInput | BottleSizeWhereInput[]
    tamanho?: FloatFilter<"BottleSize"> | number
    wines?: WineListRelationFilter
    WineBottleSize?: WineBottleSizeListRelationFilter
  }, "bottle_size_id">

  export type BottleSizeOrderByWithAggregationInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
    _count?: BottleSizeCountOrderByAggregateInput
    _avg?: BottleSizeAvgOrderByAggregateInput
    _max?: BottleSizeMaxOrderByAggregateInput
    _min?: BottleSizeMinOrderByAggregateInput
    _sum?: BottleSizeSumOrderByAggregateInput
  }

  export type BottleSizeScalarWhereWithAggregatesInput = {
    AND?: BottleSizeScalarWhereWithAggregatesInput | BottleSizeScalarWhereWithAggregatesInput[]
    OR?: BottleSizeScalarWhereWithAggregatesInput[]
    NOT?: BottleSizeScalarWhereWithAggregatesInput | BottleSizeScalarWhereWithAggregatesInput[]
    bottle_size_id?: IntWithAggregatesFilter<"BottleSize"> | number
    tamanho?: FloatWithAggregatesFilter<"BottleSize"> | number
  }

  export type WineBottleSizeWhereInput = {
    AND?: WineBottleSizeWhereInput | WineBottleSizeWhereInput[]
    OR?: WineBottleSizeWhereInput[]
    NOT?: WineBottleSizeWhereInput | WineBottleSizeWhereInput[]
    wine_id?: IntFilter<"WineBottleSize"> | number
    bottle_size_id?: IntFilter<"WineBottleSize"> | number
    wine?: XOR<WineScalarRelationFilter, WineWhereInput>
    bottleSize?: XOR<BottleSizeScalarRelationFilter, BottleSizeWhereInput>
  }

  export type WineBottleSizeOrderByWithRelationInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
    wine?: WineOrderByWithRelationInput
    bottleSize?: BottleSizeOrderByWithRelationInput
  }

  export type WineBottleSizeWhereUniqueInput = Prisma.AtLeast<{
    wine_id_bottle_size_id?: WineBottleSizeWine_idBottle_size_idCompoundUniqueInput
    AND?: WineBottleSizeWhereInput | WineBottleSizeWhereInput[]
    OR?: WineBottleSizeWhereInput[]
    NOT?: WineBottleSizeWhereInput | WineBottleSizeWhereInput[]
    wine_id?: IntFilter<"WineBottleSize"> | number
    bottle_size_id?: IntFilter<"WineBottleSize"> | number
    wine?: XOR<WineScalarRelationFilter, WineWhereInput>
    bottleSize?: XOR<BottleSizeScalarRelationFilter, BottleSizeWhereInput>
  }, "wine_id_bottle_size_id">

  export type WineBottleSizeOrderByWithAggregationInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
    _count?: WineBottleSizeCountOrderByAggregateInput
    _avg?: WineBottleSizeAvgOrderByAggregateInput
    _max?: WineBottleSizeMaxOrderByAggregateInput
    _min?: WineBottleSizeMinOrderByAggregateInput
    _sum?: WineBottleSizeSumOrderByAggregateInput
  }

  export type WineBottleSizeScalarWhereWithAggregatesInput = {
    AND?: WineBottleSizeScalarWhereWithAggregatesInput | WineBottleSizeScalarWhereWithAggregatesInput[]
    OR?: WineBottleSizeScalarWhereWithAggregatesInput[]
    NOT?: WineBottleSizeScalarWhereWithAggregatesInput | WineBottleSizeScalarWhereWithAggregatesInput[]
    wine_id?: IntWithAggregatesFilter<"WineBottleSize"> | number
    bottle_size_id?: IntWithAggregatesFilter<"WineBottleSize"> | number
  }

  export type ReviewWhereInput = {
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    review_id?: IntFilter<"Review"> | number
    user_id?: IntFilter<"Review"> | number
    wine_id?: IntFilter<"Review"> | number
    rating?: FloatFilter<"Review"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wine?: XOR<WineScalarRelationFilter, WineWhereInput>
  }

  export type ReviewOrderByWithRelationInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
    user?: UserOrderByWithRelationInput
    wine?: WineOrderByWithRelationInput
  }

  export type ReviewWhereUniqueInput = Prisma.AtLeast<{
    review_id?: number
    AND?: ReviewWhereInput | ReviewWhereInput[]
    OR?: ReviewWhereInput[]
    NOT?: ReviewWhereInput | ReviewWhereInput[]
    user_id?: IntFilter<"Review"> | number
    wine_id?: IntFilter<"Review"> | number
    rating?: FloatFilter<"Review"> | number
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    wine?: XOR<WineScalarRelationFilter, WineWhereInput>
  }, "review_id">

  export type ReviewOrderByWithAggregationInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
    _count?: ReviewCountOrderByAggregateInput
    _avg?: ReviewAvgOrderByAggregateInput
    _max?: ReviewMaxOrderByAggregateInput
    _min?: ReviewMinOrderByAggregateInput
    _sum?: ReviewSumOrderByAggregateInput
  }

  export type ReviewScalarWhereWithAggregatesInput = {
    AND?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    OR?: ReviewScalarWhereWithAggregatesInput[]
    NOT?: ReviewScalarWhereWithAggregatesInput | ReviewScalarWhereWithAggregatesInput[]
    review_id?: IntWithAggregatesFilter<"Review"> | number
    user_id?: IntWithAggregatesFilter<"Review"> | number
    wine_id?: IntWithAggregatesFilter<"Review"> | number
    rating?: FloatWithAggregatesFilter<"Review"> | number
  }

  export type UserCreateInput = {
    nome: string
    email: string
    password: string
    isAdmin?: boolean
    reviews?: ReviewCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    nome: string
    email: string
    password: string
    isAdmin?: boolean
    reviews?: ReviewUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    reviews?: ReviewUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    nome: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UserUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoryCreateInput = {
    nome: string
    wines?: WineCreateNestedManyWithoutCategoriaInput
  }

  export type CategoryUncheckedCreateInput = {
    category_id?: number
    nome: string
    wines?: WineUncheckedCreateNestedManyWithoutCategoriaInput
  }

  export type CategoryUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    wines?: WineUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    wines?: WineUncheckedUpdateManyWithoutCategoriaNestedInput
  }

  export type CategoryCreateManyInput = {
    category_id?: number
    nome: string
  }

  export type CategoryUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type WineCreateInput = {
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    categoria: CategoryCreateNestedOneWithoutWinesInput
    reviews?: ReviewCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutWineInput
  }

  export type WineUncheckedCreateInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    categoriaId: number
    averageRating?: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeUncheckedCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    categoria?: CategoryUpdateOneRequiredWithoutWinesNestedInput
    reviews?: ReviewUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUncheckedUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineCreateManyInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    categoriaId: number
    averageRating?: number
  }

  export type WineUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
  }

  export type WineUncheckedUpdateManyInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
  }

  export type BottleSizeCreateInput = {
    tamanho: number
    wines?: WineCreateNestedManyWithoutBottleSizesInput
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutBottleSizeInput
  }

  export type BottleSizeUncheckedCreateInput = {
    bottle_size_id?: number
    tamanho: number
    wines?: WineUncheckedCreateNestedManyWithoutBottleSizesInput
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutBottleSizeInput
  }

  export type BottleSizeUpdateInput = {
    tamanho?: FloatFieldUpdateOperationsInput | number
    wines?: WineUpdateManyWithoutBottleSizesNestedInput
    WineBottleSize?: WineBottleSizeUpdateManyWithoutBottleSizeNestedInput
  }

  export type BottleSizeUncheckedUpdateInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    tamanho?: FloatFieldUpdateOperationsInput | number
    wines?: WineUncheckedUpdateManyWithoutBottleSizesNestedInput
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutBottleSizeNestedInput
  }

  export type BottleSizeCreateManyInput = {
    bottle_size_id?: number
    tamanho: number
  }

  export type BottleSizeUpdateManyMutationInput = {
    tamanho?: FloatFieldUpdateOperationsInput | number
  }

  export type BottleSizeUncheckedUpdateManyInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    tamanho?: FloatFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeCreateInput = {
    wine: WineCreateNestedOneWithoutWineBottleSizeInput
    bottleSize: BottleSizeCreateNestedOneWithoutWineBottleSizeInput
  }

  export type WineBottleSizeUncheckedCreateInput = {
    wine_id: number
    bottle_size_id: number
  }

  export type WineBottleSizeUpdateInput = {
    wine?: WineUpdateOneRequiredWithoutWineBottleSizeNestedInput
    bottleSize?: BottleSizeUpdateOneRequiredWithoutWineBottleSizeNestedInput
  }

  export type WineBottleSizeUncheckedUpdateInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    bottle_size_id?: IntFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeCreateManyInput = {
    wine_id: number
    bottle_size_id: number
  }

  export type WineBottleSizeUpdateManyMutationInput = {

  }

  export type WineBottleSizeUncheckedUpdateManyInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    bottle_size_id?: IntFieldUpdateOperationsInput | number
  }

  export type ReviewCreateInput = {
    rating: number
    user: UserCreateNestedOneWithoutReviewsInput
    wine: WineCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateInput = {
    review_id?: number
    user_id: number
    wine_id: number
    rating: number
  }

  export type ReviewUpdateInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
    wine?: WineUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    wine_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyInput = {
    review_id?: number
    user_id: number
    wine_id: number
    rating: number
  }

  export type ReviewUpdateManyMutationInput = {
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    wine_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ReviewListRelationFilter = {
    every?: ReviewWhereInput
    some?: ReviewWhereInput
    none?: ReviewWhereInput
  }

  export type ReviewOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    email?: SortOrder
    password?: SortOrder
    isAdmin?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type WineListRelationFilter = {
    every?: WineWhereInput
    some?: WineWhereInput
    none?: WineWhereInput
  }

  export type WineOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    category_id?: SortOrder
    nome?: SortOrder
  }

  export type CategoryAvgOrderByAggregateInput = {
    category_id?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    category_id?: SortOrder
    nome?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    category_id?: SortOrder
    nome?: SortOrder
  }

  export type CategorySumOrderByAggregateInput = {
    category_id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type CategoryScalarRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type BottleSizeListRelationFilter = {
    every?: BottleSizeWhereInput
    some?: BottleSizeWhereInput
    none?: BottleSizeWhereInput
  }

  export type WineBottleSizeListRelationFilter = {
    every?: WineBottleSizeWhereInput
    some?: WineBottleSizeWhereInput
    none?: WineBottleSizeWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BottleSizeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WineBottleSizeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WineCountOrderByAggregateInput = {
    wine_id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    emPromocao?: SortOrder
    precoPromocao?: SortOrder
    emDestaque?: SortOrder
    descricaoDestaque?: SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
  }

  export type WineAvgOrderByAggregateInput = {
    wine_id?: SortOrder
    preco?: SortOrder
    precoPromocao?: SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
  }

  export type WineMaxOrderByAggregateInput = {
    wine_id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    emPromocao?: SortOrder
    precoPromocao?: SortOrder
    emDestaque?: SortOrder
    descricaoDestaque?: SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
  }

  export type WineMinOrderByAggregateInput = {
    wine_id?: SortOrder
    nome?: SortOrder
    descricao?: SortOrder
    preco?: SortOrder
    imagem?: SortOrder
    emPromocao?: SortOrder
    precoPromocao?: SortOrder
    emDestaque?: SortOrder
    descricaoDestaque?: SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
  }

  export type WineSumOrderByAggregateInput = {
    wine_id?: SortOrder
    preco?: SortOrder
    precoPromocao?: SortOrder
    categoriaId?: SortOrder
    averageRating?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BottleSizeCountOrderByAggregateInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
  }

  export type BottleSizeAvgOrderByAggregateInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
  }

  export type BottleSizeMaxOrderByAggregateInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
  }

  export type BottleSizeMinOrderByAggregateInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
  }

  export type BottleSizeSumOrderByAggregateInput = {
    bottle_size_id?: SortOrder
    tamanho?: SortOrder
  }

  export type WineScalarRelationFilter = {
    is?: WineWhereInput
    isNot?: WineWhereInput
  }

  export type BottleSizeScalarRelationFilter = {
    is?: BottleSizeWhereInput
    isNot?: BottleSizeWhereInput
  }

  export type WineBottleSizeWine_idBottle_size_idCompoundUniqueInput = {
    wine_id: number
    bottle_size_id: number
  }

  export type WineBottleSizeCountOrderByAggregateInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
  }

  export type WineBottleSizeAvgOrderByAggregateInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
  }

  export type WineBottleSizeMaxOrderByAggregateInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
  }

  export type WineBottleSizeMinOrderByAggregateInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
  }

  export type WineBottleSizeSumOrderByAggregateInput = {
    wine_id?: SortOrder
    bottle_size_id?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ReviewCountOrderByAggregateInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewAvgOrderByAggregateInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMaxOrderByAggregateInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewMinOrderByAggregateInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewSumOrderByAggregateInput = {
    review_id?: SortOrder
    user_id?: SortOrder
    wine_id?: SortOrder
    rating?: SortOrder
  }

  export type ReviewCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ReviewUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReviewUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput> | ReviewCreateWithoutUserInput[] | ReviewUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutUserInput | ReviewCreateOrConnectWithoutUserInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutUserInput | ReviewUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReviewCreateManyUserInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutUserInput | ReviewUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutUserInput | ReviewUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput> | WineCreateWithoutCategoriaInput[] | WineUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCategoriaInput | WineCreateOrConnectWithoutCategoriaInput[]
    createMany?: WineCreateManyCategoriaInputEnvelope
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutCategoriaInput = {
    create?: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput> | WineCreateWithoutCategoriaInput[] | WineUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCategoriaInput | WineCreateOrConnectWithoutCategoriaInput[]
    createMany?: WineCreateManyCategoriaInputEnvelope
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput> | WineCreateWithoutCategoriaInput[] | WineUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCategoriaInput | WineCreateOrConnectWithoutCategoriaInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutCategoriaInput | WineUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: WineCreateManyCategoriaInputEnvelope
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutCategoriaInput | WineUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: WineUpdateManyWithWhereWithoutCategoriaInput | WineUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutCategoriaNestedInput = {
    create?: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput> | WineCreateWithoutCategoriaInput[] | WineUncheckedCreateWithoutCategoriaInput[]
    connectOrCreate?: WineCreateOrConnectWithoutCategoriaInput | WineCreateOrConnectWithoutCategoriaInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutCategoriaInput | WineUpsertWithWhereUniqueWithoutCategoriaInput[]
    createMany?: WineCreateManyCategoriaInputEnvelope
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutCategoriaInput | WineUpdateWithWhereUniqueWithoutCategoriaInput[]
    updateMany?: WineUpdateManyWithWhereWithoutCategoriaInput | WineUpdateManyWithWhereWithoutCategoriaInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type CategoryCreateNestedOneWithoutWinesInput = {
    create?: XOR<CategoryCreateWithoutWinesInput, CategoryUncheckedCreateWithoutWinesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutWinesInput
    connect?: CategoryWhereUniqueInput
  }

  export type ReviewCreateNestedManyWithoutWineInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    createMany?: ReviewCreateManyWineInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BottleSizeCreateNestedManyWithoutWinesInput = {
    create?: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput> | BottleSizeCreateWithoutWinesInput[] | BottleSizeUncheckedCreateWithoutWinesInput[]
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWinesInput | BottleSizeCreateOrConnectWithoutWinesInput[]
    connect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
  }

  export type WineBottleSizeCreateNestedManyWithoutWineInput = {
    create?: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput> | WineBottleSizeCreateWithoutWineInput[] | WineBottleSizeUncheckedCreateWithoutWineInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutWineInput | WineBottleSizeCreateOrConnectWithoutWineInput[]
    createMany?: WineBottleSizeCreateManyWineInputEnvelope
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
  }

  export type ReviewUncheckedCreateNestedManyWithoutWineInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    createMany?: ReviewCreateManyWineInputEnvelope
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
  }

  export type BottleSizeUncheckedCreateNestedManyWithoutWinesInput = {
    create?: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput> | BottleSizeCreateWithoutWinesInput[] | BottleSizeUncheckedCreateWithoutWinesInput[]
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWinesInput | BottleSizeCreateOrConnectWithoutWinesInput[]
    connect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
  }

  export type WineBottleSizeUncheckedCreateNestedManyWithoutWineInput = {
    create?: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput> | WineBottleSizeCreateWithoutWineInput[] | WineBottleSizeUncheckedCreateWithoutWineInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutWineInput | WineBottleSizeCreateOrConnectWithoutWineInput[]
    createMany?: WineBottleSizeCreateManyWineInputEnvelope
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type CategoryUpdateOneRequiredWithoutWinesNestedInput = {
    create?: XOR<CategoryCreateWithoutWinesInput, CategoryUncheckedCreateWithoutWinesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutWinesInput
    upsert?: CategoryUpsertWithoutWinesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutWinesInput, CategoryUpdateWithoutWinesInput>, CategoryUncheckedUpdateWithoutWinesInput>
  }

  export type ReviewUpdateManyWithoutWineNestedInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWineInput | ReviewUpsertWithWhereUniqueWithoutWineInput[]
    createMany?: ReviewCreateManyWineInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWineInput | ReviewUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWineInput | ReviewUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BottleSizeUpdateManyWithoutWinesNestedInput = {
    create?: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput> | BottleSizeCreateWithoutWinesInput[] | BottleSizeUncheckedCreateWithoutWinesInput[]
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWinesInput | BottleSizeCreateOrConnectWithoutWinesInput[]
    upsert?: BottleSizeUpsertWithWhereUniqueWithoutWinesInput | BottleSizeUpsertWithWhereUniqueWithoutWinesInput[]
    set?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    disconnect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    delete?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    connect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    update?: BottleSizeUpdateWithWhereUniqueWithoutWinesInput | BottleSizeUpdateWithWhereUniqueWithoutWinesInput[]
    updateMany?: BottleSizeUpdateManyWithWhereWithoutWinesInput | BottleSizeUpdateManyWithWhereWithoutWinesInput[]
    deleteMany?: BottleSizeScalarWhereInput | BottleSizeScalarWhereInput[]
  }

  export type WineBottleSizeUpdateManyWithoutWineNestedInput = {
    create?: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput> | WineBottleSizeCreateWithoutWineInput[] | WineBottleSizeUncheckedCreateWithoutWineInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutWineInput | WineBottleSizeCreateOrConnectWithoutWineInput[]
    upsert?: WineBottleSizeUpsertWithWhereUniqueWithoutWineInput | WineBottleSizeUpsertWithWhereUniqueWithoutWineInput[]
    createMany?: WineBottleSizeCreateManyWineInputEnvelope
    set?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    disconnect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    delete?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    update?: WineBottleSizeUpdateWithWhereUniqueWithoutWineInput | WineBottleSizeUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: WineBottleSizeUpdateManyWithWhereWithoutWineInput | WineBottleSizeUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
  }

  export type ReviewUncheckedUpdateManyWithoutWineNestedInput = {
    create?: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput> | ReviewCreateWithoutWineInput[] | ReviewUncheckedCreateWithoutWineInput[]
    connectOrCreate?: ReviewCreateOrConnectWithoutWineInput | ReviewCreateOrConnectWithoutWineInput[]
    upsert?: ReviewUpsertWithWhereUniqueWithoutWineInput | ReviewUpsertWithWhereUniqueWithoutWineInput[]
    createMany?: ReviewCreateManyWineInputEnvelope
    set?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    disconnect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    delete?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    connect?: ReviewWhereUniqueInput | ReviewWhereUniqueInput[]
    update?: ReviewUpdateWithWhereUniqueWithoutWineInput | ReviewUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: ReviewUpdateManyWithWhereWithoutWineInput | ReviewUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
  }

  export type BottleSizeUncheckedUpdateManyWithoutWinesNestedInput = {
    create?: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput> | BottleSizeCreateWithoutWinesInput[] | BottleSizeUncheckedCreateWithoutWinesInput[]
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWinesInput | BottleSizeCreateOrConnectWithoutWinesInput[]
    upsert?: BottleSizeUpsertWithWhereUniqueWithoutWinesInput | BottleSizeUpsertWithWhereUniqueWithoutWinesInput[]
    set?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    disconnect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    delete?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    connect?: BottleSizeWhereUniqueInput | BottleSizeWhereUniqueInput[]
    update?: BottleSizeUpdateWithWhereUniqueWithoutWinesInput | BottleSizeUpdateWithWhereUniqueWithoutWinesInput[]
    updateMany?: BottleSizeUpdateManyWithWhereWithoutWinesInput | BottleSizeUpdateManyWithWhereWithoutWinesInput[]
    deleteMany?: BottleSizeScalarWhereInput | BottleSizeScalarWhereInput[]
  }

  export type WineBottleSizeUncheckedUpdateManyWithoutWineNestedInput = {
    create?: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput> | WineBottleSizeCreateWithoutWineInput[] | WineBottleSizeUncheckedCreateWithoutWineInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutWineInput | WineBottleSizeCreateOrConnectWithoutWineInput[]
    upsert?: WineBottleSizeUpsertWithWhereUniqueWithoutWineInput | WineBottleSizeUpsertWithWhereUniqueWithoutWineInput[]
    createMany?: WineBottleSizeCreateManyWineInputEnvelope
    set?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    disconnect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    delete?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    update?: WineBottleSizeUpdateWithWhereUniqueWithoutWineInput | WineBottleSizeUpdateWithWhereUniqueWithoutWineInput[]
    updateMany?: WineBottleSizeUpdateManyWithWhereWithoutWineInput | WineBottleSizeUpdateManyWithWhereWithoutWineInput[]
    deleteMany?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
  }

  export type WineCreateNestedManyWithoutBottleSizesInput = {
    create?: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput> | WineCreateWithoutBottleSizesInput[] | WineUncheckedCreateWithoutBottleSizesInput[]
    connectOrCreate?: WineCreateOrConnectWithoutBottleSizesInput | WineCreateOrConnectWithoutBottleSizesInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineBottleSizeCreateNestedManyWithoutBottleSizeInput = {
    create?: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput> | WineBottleSizeCreateWithoutBottleSizeInput[] | WineBottleSizeUncheckedCreateWithoutBottleSizeInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutBottleSizeInput | WineBottleSizeCreateOrConnectWithoutBottleSizeInput[]
    createMany?: WineBottleSizeCreateManyBottleSizeInputEnvelope
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
  }

  export type WineUncheckedCreateNestedManyWithoutBottleSizesInput = {
    create?: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput> | WineCreateWithoutBottleSizesInput[] | WineUncheckedCreateWithoutBottleSizesInput[]
    connectOrCreate?: WineCreateOrConnectWithoutBottleSizesInput | WineCreateOrConnectWithoutBottleSizesInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
  }

  export type WineBottleSizeUncheckedCreateNestedManyWithoutBottleSizeInput = {
    create?: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput> | WineBottleSizeCreateWithoutBottleSizeInput[] | WineBottleSizeUncheckedCreateWithoutBottleSizeInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutBottleSizeInput | WineBottleSizeCreateOrConnectWithoutBottleSizeInput[]
    createMany?: WineBottleSizeCreateManyBottleSizeInputEnvelope
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
  }

  export type WineUpdateManyWithoutBottleSizesNestedInput = {
    create?: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput> | WineCreateWithoutBottleSizesInput[] | WineUncheckedCreateWithoutBottleSizesInput[]
    connectOrCreate?: WineCreateOrConnectWithoutBottleSizesInput | WineCreateOrConnectWithoutBottleSizesInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutBottleSizesInput | WineUpsertWithWhereUniqueWithoutBottleSizesInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutBottleSizesInput | WineUpdateWithWhereUniqueWithoutBottleSizesInput[]
    updateMany?: WineUpdateManyWithWhereWithoutBottleSizesInput | WineUpdateManyWithWhereWithoutBottleSizesInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineBottleSizeUpdateManyWithoutBottleSizeNestedInput = {
    create?: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput> | WineBottleSizeCreateWithoutBottleSizeInput[] | WineBottleSizeUncheckedCreateWithoutBottleSizeInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutBottleSizeInput | WineBottleSizeCreateOrConnectWithoutBottleSizeInput[]
    upsert?: WineBottleSizeUpsertWithWhereUniqueWithoutBottleSizeInput | WineBottleSizeUpsertWithWhereUniqueWithoutBottleSizeInput[]
    createMany?: WineBottleSizeCreateManyBottleSizeInputEnvelope
    set?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    disconnect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    delete?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    update?: WineBottleSizeUpdateWithWhereUniqueWithoutBottleSizeInput | WineBottleSizeUpdateWithWhereUniqueWithoutBottleSizeInput[]
    updateMany?: WineBottleSizeUpdateManyWithWhereWithoutBottleSizeInput | WineBottleSizeUpdateManyWithWhereWithoutBottleSizeInput[]
    deleteMany?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
  }

  export type WineUncheckedUpdateManyWithoutBottleSizesNestedInput = {
    create?: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput> | WineCreateWithoutBottleSizesInput[] | WineUncheckedCreateWithoutBottleSizesInput[]
    connectOrCreate?: WineCreateOrConnectWithoutBottleSizesInput | WineCreateOrConnectWithoutBottleSizesInput[]
    upsert?: WineUpsertWithWhereUniqueWithoutBottleSizesInput | WineUpsertWithWhereUniqueWithoutBottleSizesInput[]
    set?: WineWhereUniqueInput | WineWhereUniqueInput[]
    disconnect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    delete?: WineWhereUniqueInput | WineWhereUniqueInput[]
    connect?: WineWhereUniqueInput | WineWhereUniqueInput[]
    update?: WineUpdateWithWhereUniqueWithoutBottleSizesInput | WineUpdateWithWhereUniqueWithoutBottleSizesInput[]
    updateMany?: WineUpdateManyWithWhereWithoutBottleSizesInput | WineUpdateManyWithWhereWithoutBottleSizesInput[]
    deleteMany?: WineScalarWhereInput | WineScalarWhereInput[]
  }

  export type WineBottleSizeUncheckedUpdateManyWithoutBottleSizeNestedInput = {
    create?: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput> | WineBottleSizeCreateWithoutBottleSizeInput[] | WineBottleSizeUncheckedCreateWithoutBottleSizeInput[]
    connectOrCreate?: WineBottleSizeCreateOrConnectWithoutBottleSizeInput | WineBottleSizeCreateOrConnectWithoutBottleSizeInput[]
    upsert?: WineBottleSizeUpsertWithWhereUniqueWithoutBottleSizeInput | WineBottleSizeUpsertWithWhereUniqueWithoutBottleSizeInput[]
    createMany?: WineBottleSizeCreateManyBottleSizeInputEnvelope
    set?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    disconnect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    delete?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    connect?: WineBottleSizeWhereUniqueInput | WineBottleSizeWhereUniqueInput[]
    update?: WineBottleSizeUpdateWithWhereUniqueWithoutBottleSizeInput | WineBottleSizeUpdateWithWhereUniqueWithoutBottleSizeInput[]
    updateMany?: WineBottleSizeUpdateManyWithWhereWithoutBottleSizeInput | WineBottleSizeUpdateManyWithWhereWithoutBottleSizeInput[]
    deleteMany?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
  }

  export type WineCreateNestedOneWithoutWineBottleSizeInput = {
    create?: XOR<WineCreateWithoutWineBottleSizeInput, WineUncheckedCreateWithoutWineBottleSizeInput>
    connectOrCreate?: WineCreateOrConnectWithoutWineBottleSizeInput
    connect?: WineWhereUniqueInput
  }

  export type BottleSizeCreateNestedOneWithoutWineBottleSizeInput = {
    create?: XOR<BottleSizeCreateWithoutWineBottleSizeInput, BottleSizeUncheckedCreateWithoutWineBottleSizeInput>
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWineBottleSizeInput
    connect?: BottleSizeWhereUniqueInput
  }

  export type WineUpdateOneRequiredWithoutWineBottleSizeNestedInput = {
    create?: XOR<WineCreateWithoutWineBottleSizeInput, WineUncheckedCreateWithoutWineBottleSizeInput>
    connectOrCreate?: WineCreateOrConnectWithoutWineBottleSizeInput
    upsert?: WineUpsertWithoutWineBottleSizeInput
    connect?: WineWhereUniqueInput
    update?: XOR<XOR<WineUpdateToOneWithWhereWithoutWineBottleSizeInput, WineUpdateWithoutWineBottleSizeInput>, WineUncheckedUpdateWithoutWineBottleSizeInput>
  }

  export type BottleSizeUpdateOneRequiredWithoutWineBottleSizeNestedInput = {
    create?: XOR<BottleSizeCreateWithoutWineBottleSizeInput, BottleSizeUncheckedCreateWithoutWineBottleSizeInput>
    connectOrCreate?: BottleSizeCreateOrConnectWithoutWineBottleSizeInput
    upsert?: BottleSizeUpsertWithoutWineBottleSizeInput
    connect?: BottleSizeWhereUniqueInput
    update?: XOR<XOR<BottleSizeUpdateToOneWithWhereWithoutWineBottleSizeInput, BottleSizeUpdateWithoutWineBottleSizeInput>, BottleSizeUncheckedUpdateWithoutWineBottleSizeInput>
  }

  export type UserCreateNestedOneWithoutReviewsInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type WineCreateNestedOneWithoutReviewsInput = {
    create?: XOR<WineCreateWithoutReviewsInput, WineUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: WineCreateOrConnectWithoutReviewsInput
    connect?: WineWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReviewsInput
    upsert?: UserUpsertWithoutReviewsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReviewsInput, UserUpdateWithoutReviewsInput>, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type WineUpdateOneRequiredWithoutReviewsNestedInput = {
    create?: XOR<WineCreateWithoutReviewsInput, WineUncheckedCreateWithoutReviewsInput>
    connectOrCreate?: WineCreateOrConnectWithoutReviewsInput
    upsert?: WineUpsertWithoutReviewsInput
    connect?: WineWhereUniqueInput
    update?: XOR<XOR<WineUpdateToOneWithWhereWithoutReviewsInput, WineUpdateWithoutReviewsInput>, WineUncheckedUpdateWithoutReviewsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ReviewCreateWithoutUserInput = {
    rating: number
    wine: WineCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutUserInput = {
    review_id?: number
    wine_id: number
    rating: number
  }

  export type ReviewCreateOrConnectWithoutUserInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewCreateManyUserInputEnvelope = {
    data: ReviewCreateManyUserInput | ReviewCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ReviewUpsertWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
    create: XOR<ReviewCreateWithoutUserInput, ReviewUncheckedCreateWithoutUserInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutUserInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutUserInput, ReviewUncheckedUpdateWithoutUserInput>
  }

  export type ReviewUpdateManyWithWhereWithoutUserInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutUserInput>
  }

  export type ReviewScalarWhereInput = {
    AND?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    OR?: ReviewScalarWhereInput[]
    NOT?: ReviewScalarWhereInput | ReviewScalarWhereInput[]
    review_id?: IntFilter<"Review"> | number
    user_id?: IntFilter<"Review"> | number
    wine_id?: IntFilter<"Review"> | number
    rating?: FloatFilter<"Review"> | number
  }

  export type WineCreateWithoutCategoriaInput = {
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    reviews?: ReviewCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutWineInput
  }

  export type WineUncheckedCreateWithoutCategoriaInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeUncheckedCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutCategoriaInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput>
  }

  export type WineCreateManyCategoriaInputEnvelope = {
    data: WineCreateManyCategoriaInput | WineCreateManyCategoriaInput[]
    skipDuplicates?: boolean
  }

  export type WineUpsertWithWhereUniqueWithoutCategoriaInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutCategoriaInput, WineUncheckedUpdateWithoutCategoriaInput>
    create: XOR<WineCreateWithoutCategoriaInput, WineUncheckedCreateWithoutCategoriaInput>
  }

  export type WineUpdateWithWhereUniqueWithoutCategoriaInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutCategoriaInput, WineUncheckedUpdateWithoutCategoriaInput>
  }

  export type WineUpdateManyWithWhereWithoutCategoriaInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutCategoriaInput>
  }

  export type WineScalarWhereInput = {
    AND?: WineScalarWhereInput | WineScalarWhereInput[]
    OR?: WineScalarWhereInput[]
    NOT?: WineScalarWhereInput | WineScalarWhereInput[]
    wine_id?: IntFilter<"Wine"> | number
    nome?: StringFilter<"Wine"> | string
    descricao?: StringFilter<"Wine"> | string
    preco?: FloatFilter<"Wine"> | number
    imagem?: StringFilter<"Wine"> | string
    emPromocao?: BoolFilter<"Wine"> | boolean
    precoPromocao?: FloatNullableFilter<"Wine"> | number | null
    emDestaque?: BoolFilter<"Wine"> | boolean
    descricaoDestaque?: StringNullableFilter<"Wine"> | string | null
    categoriaId?: IntFilter<"Wine"> | number
    averageRating?: FloatFilter<"Wine"> | number
  }

  export type CategoryCreateWithoutWinesInput = {
    nome: string
  }

  export type CategoryUncheckedCreateWithoutWinesInput = {
    category_id?: number
    nome: string
  }

  export type CategoryCreateOrConnectWithoutWinesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutWinesInput, CategoryUncheckedCreateWithoutWinesInput>
  }

  export type ReviewCreateWithoutWineInput = {
    rating: number
    user: UserCreateNestedOneWithoutReviewsInput
  }

  export type ReviewUncheckedCreateWithoutWineInput = {
    review_id?: number
    user_id: number
    rating: number
  }

  export type ReviewCreateOrConnectWithoutWineInput = {
    where: ReviewWhereUniqueInput
    create: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput>
  }

  export type ReviewCreateManyWineInputEnvelope = {
    data: ReviewCreateManyWineInput | ReviewCreateManyWineInput[]
    skipDuplicates?: boolean
  }

  export type BottleSizeCreateWithoutWinesInput = {
    tamanho: number
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutBottleSizeInput
  }

  export type BottleSizeUncheckedCreateWithoutWinesInput = {
    bottle_size_id?: number
    tamanho: number
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutBottleSizeInput
  }

  export type BottleSizeCreateOrConnectWithoutWinesInput = {
    where: BottleSizeWhereUniqueInput
    create: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput>
  }

  export type WineBottleSizeCreateWithoutWineInput = {
    bottleSize: BottleSizeCreateNestedOneWithoutWineBottleSizeInput
  }

  export type WineBottleSizeUncheckedCreateWithoutWineInput = {
    bottle_size_id: number
  }

  export type WineBottleSizeCreateOrConnectWithoutWineInput = {
    where: WineBottleSizeWhereUniqueInput
    create: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput>
  }

  export type WineBottleSizeCreateManyWineInputEnvelope = {
    data: WineBottleSizeCreateManyWineInput | WineBottleSizeCreateManyWineInput[]
    skipDuplicates?: boolean
  }

  export type CategoryUpsertWithoutWinesInput = {
    update: XOR<CategoryUpdateWithoutWinesInput, CategoryUncheckedUpdateWithoutWinesInput>
    create: XOR<CategoryCreateWithoutWinesInput, CategoryUncheckedCreateWithoutWinesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutWinesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutWinesInput, CategoryUncheckedUpdateWithoutWinesInput>
  }

  export type CategoryUpdateWithoutWinesInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutWinesInput = {
    category_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type ReviewUpsertWithWhereUniqueWithoutWineInput = {
    where: ReviewWhereUniqueInput
    update: XOR<ReviewUpdateWithoutWineInput, ReviewUncheckedUpdateWithoutWineInput>
    create: XOR<ReviewCreateWithoutWineInput, ReviewUncheckedCreateWithoutWineInput>
  }

  export type ReviewUpdateWithWhereUniqueWithoutWineInput = {
    where: ReviewWhereUniqueInput
    data: XOR<ReviewUpdateWithoutWineInput, ReviewUncheckedUpdateWithoutWineInput>
  }

  export type ReviewUpdateManyWithWhereWithoutWineInput = {
    where: ReviewScalarWhereInput
    data: XOR<ReviewUpdateManyMutationInput, ReviewUncheckedUpdateManyWithoutWineInput>
  }

  export type BottleSizeUpsertWithWhereUniqueWithoutWinesInput = {
    where: BottleSizeWhereUniqueInput
    update: XOR<BottleSizeUpdateWithoutWinesInput, BottleSizeUncheckedUpdateWithoutWinesInput>
    create: XOR<BottleSizeCreateWithoutWinesInput, BottleSizeUncheckedCreateWithoutWinesInput>
  }

  export type BottleSizeUpdateWithWhereUniqueWithoutWinesInput = {
    where: BottleSizeWhereUniqueInput
    data: XOR<BottleSizeUpdateWithoutWinesInput, BottleSizeUncheckedUpdateWithoutWinesInput>
  }

  export type BottleSizeUpdateManyWithWhereWithoutWinesInput = {
    where: BottleSizeScalarWhereInput
    data: XOR<BottleSizeUpdateManyMutationInput, BottleSizeUncheckedUpdateManyWithoutWinesInput>
  }

  export type BottleSizeScalarWhereInput = {
    AND?: BottleSizeScalarWhereInput | BottleSizeScalarWhereInput[]
    OR?: BottleSizeScalarWhereInput[]
    NOT?: BottleSizeScalarWhereInput | BottleSizeScalarWhereInput[]
    bottle_size_id?: IntFilter<"BottleSize"> | number
    tamanho?: FloatFilter<"BottleSize"> | number
  }

  export type WineBottleSizeUpsertWithWhereUniqueWithoutWineInput = {
    where: WineBottleSizeWhereUniqueInput
    update: XOR<WineBottleSizeUpdateWithoutWineInput, WineBottleSizeUncheckedUpdateWithoutWineInput>
    create: XOR<WineBottleSizeCreateWithoutWineInput, WineBottleSizeUncheckedCreateWithoutWineInput>
  }

  export type WineBottleSizeUpdateWithWhereUniqueWithoutWineInput = {
    where: WineBottleSizeWhereUniqueInput
    data: XOR<WineBottleSizeUpdateWithoutWineInput, WineBottleSizeUncheckedUpdateWithoutWineInput>
  }

  export type WineBottleSizeUpdateManyWithWhereWithoutWineInput = {
    where: WineBottleSizeScalarWhereInput
    data: XOR<WineBottleSizeUpdateManyMutationInput, WineBottleSizeUncheckedUpdateManyWithoutWineInput>
  }

  export type WineBottleSizeScalarWhereInput = {
    AND?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
    OR?: WineBottleSizeScalarWhereInput[]
    NOT?: WineBottleSizeScalarWhereInput | WineBottleSizeScalarWhereInput[]
    wine_id?: IntFilter<"WineBottleSize"> | number
    bottle_size_id?: IntFilter<"WineBottleSize"> | number
  }

  export type WineCreateWithoutBottleSizesInput = {
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    categoria: CategoryCreateNestedOneWithoutWinesInput
    reviews?: ReviewCreateNestedManyWithoutWineInput
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutWineInput
  }

  export type WineUncheckedCreateWithoutBottleSizesInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    categoriaId: number
    averageRating?: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutWineInput
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutBottleSizesInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput>
  }

  export type WineBottleSizeCreateWithoutBottleSizeInput = {
    wine: WineCreateNestedOneWithoutWineBottleSizeInput
  }

  export type WineBottleSizeUncheckedCreateWithoutBottleSizeInput = {
    wine_id: number
  }

  export type WineBottleSizeCreateOrConnectWithoutBottleSizeInput = {
    where: WineBottleSizeWhereUniqueInput
    create: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput>
  }

  export type WineBottleSizeCreateManyBottleSizeInputEnvelope = {
    data: WineBottleSizeCreateManyBottleSizeInput | WineBottleSizeCreateManyBottleSizeInput[]
    skipDuplicates?: boolean
  }

  export type WineUpsertWithWhereUniqueWithoutBottleSizesInput = {
    where: WineWhereUniqueInput
    update: XOR<WineUpdateWithoutBottleSizesInput, WineUncheckedUpdateWithoutBottleSizesInput>
    create: XOR<WineCreateWithoutBottleSizesInput, WineUncheckedCreateWithoutBottleSizesInput>
  }

  export type WineUpdateWithWhereUniqueWithoutBottleSizesInput = {
    where: WineWhereUniqueInput
    data: XOR<WineUpdateWithoutBottleSizesInput, WineUncheckedUpdateWithoutBottleSizesInput>
  }

  export type WineUpdateManyWithWhereWithoutBottleSizesInput = {
    where: WineScalarWhereInput
    data: XOR<WineUpdateManyMutationInput, WineUncheckedUpdateManyWithoutBottleSizesInput>
  }

  export type WineBottleSizeUpsertWithWhereUniqueWithoutBottleSizeInput = {
    where: WineBottleSizeWhereUniqueInput
    update: XOR<WineBottleSizeUpdateWithoutBottleSizeInput, WineBottleSizeUncheckedUpdateWithoutBottleSizeInput>
    create: XOR<WineBottleSizeCreateWithoutBottleSizeInput, WineBottleSizeUncheckedCreateWithoutBottleSizeInput>
  }

  export type WineBottleSizeUpdateWithWhereUniqueWithoutBottleSizeInput = {
    where: WineBottleSizeWhereUniqueInput
    data: XOR<WineBottleSizeUpdateWithoutBottleSizeInput, WineBottleSizeUncheckedUpdateWithoutBottleSizeInput>
  }

  export type WineBottleSizeUpdateManyWithWhereWithoutBottleSizeInput = {
    where: WineBottleSizeScalarWhereInput
    data: XOR<WineBottleSizeUpdateManyMutationInput, WineBottleSizeUncheckedUpdateManyWithoutBottleSizeInput>
  }

  export type WineCreateWithoutWineBottleSizeInput = {
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    categoria: CategoryCreateNestedOneWithoutWinesInput
    reviews?: ReviewCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeCreateNestedManyWithoutWinesInput
  }

  export type WineUncheckedCreateWithoutWineBottleSizeInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    categoriaId: number
    averageRating?: number
    reviews?: ReviewUncheckedCreateNestedManyWithoutWineInput
    bottleSizes?: BottleSizeUncheckedCreateNestedManyWithoutWinesInput
  }

  export type WineCreateOrConnectWithoutWineBottleSizeInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutWineBottleSizeInput, WineUncheckedCreateWithoutWineBottleSizeInput>
  }

  export type BottleSizeCreateWithoutWineBottleSizeInput = {
    tamanho: number
    wines?: WineCreateNestedManyWithoutBottleSizesInput
  }

  export type BottleSizeUncheckedCreateWithoutWineBottleSizeInput = {
    bottle_size_id?: number
    tamanho: number
    wines?: WineUncheckedCreateNestedManyWithoutBottleSizesInput
  }

  export type BottleSizeCreateOrConnectWithoutWineBottleSizeInput = {
    where: BottleSizeWhereUniqueInput
    create: XOR<BottleSizeCreateWithoutWineBottleSizeInput, BottleSizeUncheckedCreateWithoutWineBottleSizeInput>
  }

  export type WineUpsertWithoutWineBottleSizeInput = {
    update: XOR<WineUpdateWithoutWineBottleSizeInput, WineUncheckedUpdateWithoutWineBottleSizeInput>
    create: XOR<WineCreateWithoutWineBottleSizeInput, WineUncheckedCreateWithoutWineBottleSizeInput>
    where?: WineWhereInput
  }

  export type WineUpdateToOneWithWhereWithoutWineBottleSizeInput = {
    where?: WineWhereInput
    data: XOR<WineUpdateWithoutWineBottleSizeInput, WineUncheckedUpdateWithoutWineBottleSizeInput>
  }

  export type WineUpdateWithoutWineBottleSizeInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    categoria?: CategoryUpdateOneRequiredWithoutWinesNestedInput
    reviews?: ReviewUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUpdateManyWithoutWinesNestedInput
  }

  export type WineUncheckedUpdateWithoutWineBottleSizeInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUncheckedUpdateManyWithoutWinesNestedInput
  }

  export type BottleSizeUpsertWithoutWineBottleSizeInput = {
    update: XOR<BottleSizeUpdateWithoutWineBottleSizeInput, BottleSizeUncheckedUpdateWithoutWineBottleSizeInput>
    create: XOR<BottleSizeCreateWithoutWineBottleSizeInput, BottleSizeUncheckedCreateWithoutWineBottleSizeInput>
    where?: BottleSizeWhereInput
  }

  export type BottleSizeUpdateToOneWithWhereWithoutWineBottleSizeInput = {
    where?: BottleSizeWhereInput
    data: XOR<BottleSizeUpdateWithoutWineBottleSizeInput, BottleSizeUncheckedUpdateWithoutWineBottleSizeInput>
  }

  export type BottleSizeUpdateWithoutWineBottleSizeInput = {
    tamanho?: FloatFieldUpdateOperationsInput | number
    wines?: WineUpdateManyWithoutBottleSizesNestedInput
  }

  export type BottleSizeUncheckedUpdateWithoutWineBottleSizeInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    tamanho?: FloatFieldUpdateOperationsInput | number
    wines?: WineUncheckedUpdateManyWithoutBottleSizesNestedInput
  }

  export type UserCreateWithoutReviewsInput = {
    nome: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UserUncheckedCreateWithoutReviewsInput = {
    id?: number
    nome: string
    email: string
    password: string
    isAdmin?: boolean
  }

  export type UserCreateOrConnectWithoutReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
  }

  export type WineCreateWithoutReviewsInput = {
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
    categoria: CategoryCreateNestedOneWithoutWinesInput
    bottleSizes?: BottleSizeCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeCreateNestedManyWithoutWineInput
  }

  export type WineUncheckedCreateWithoutReviewsInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    categoriaId: number
    averageRating?: number
    bottleSizes?: BottleSizeUncheckedCreateNestedManyWithoutWinesInput
    WineBottleSize?: WineBottleSizeUncheckedCreateNestedManyWithoutWineInput
  }

  export type WineCreateOrConnectWithoutReviewsInput = {
    where: WineWhereUniqueInput
    create: XOR<WineCreateWithoutReviewsInput, WineUncheckedCreateWithoutReviewsInput>
  }

  export type UserUpsertWithoutReviewsInput = {
    update: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
    create: XOR<UserCreateWithoutReviewsInput, UserUncheckedCreateWithoutReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReviewsInput, UserUncheckedUpdateWithoutReviewsInput>
  }

  export type UserUpdateWithoutReviewsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateWithoutReviewsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type WineUpsertWithoutReviewsInput = {
    update: XOR<WineUpdateWithoutReviewsInput, WineUncheckedUpdateWithoutReviewsInput>
    create: XOR<WineCreateWithoutReviewsInput, WineUncheckedCreateWithoutReviewsInput>
    where?: WineWhereInput
  }

  export type WineUpdateToOneWithWhereWithoutReviewsInput = {
    where?: WineWhereInput
    data: XOR<WineUpdateWithoutReviewsInput, WineUncheckedUpdateWithoutReviewsInput>
  }

  export type WineUpdateWithoutReviewsInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    categoria?: CategoryUpdateOneRequiredWithoutWinesNestedInput
    bottleSizes?: BottleSizeUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutReviewsInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    bottleSizes?: BottleSizeUncheckedUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutWineNestedInput
  }

  export type ReviewCreateManyUserInput = {
    review_id?: number
    wine_id: number
    rating: number
  }

  export type ReviewUpdateWithoutUserInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    wine?: WineUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutUserInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    wine_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutUserInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    wine_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type WineCreateManyCategoriaInput = {
    wine_id?: number
    nome: string
    descricao: string
    preco: number
    imagem: string
    emPromocao?: boolean
    precoPromocao?: number | null
    emDestaque?: boolean
    descricaoDestaque?: string | null
    averageRating?: number
  }

  export type WineUpdateWithoutCategoriaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    reviews?: ReviewUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutCategoriaInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutWineNestedInput
    bottleSizes?: BottleSizeUncheckedUpdateManyWithoutWinesNestedInput
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutCategoriaInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewCreateManyWineInput = {
    review_id?: number
    user_id: number
    rating: number
  }

  export type WineBottleSizeCreateManyWineInput = {
    bottle_size_id: number
  }

  export type ReviewUpdateWithoutWineInput = {
    rating?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutReviewsNestedInput
  }

  export type ReviewUncheckedUpdateWithoutWineInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type ReviewUncheckedUpdateManyWithoutWineInput = {
    review_id?: IntFieldUpdateOperationsInput | number
    user_id?: IntFieldUpdateOperationsInput | number
    rating?: FloatFieldUpdateOperationsInput | number
  }

  export type BottleSizeUpdateWithoutWinesInput = {
    tamanho?: FloatFieldUpdateOperationsInput | number
    WineBottleSize?: WineBottleSizeUpdateManyWithoutBottleSizeNestedInput
  }

  export type BottleSizeUncheckedUpdateWithoutWinesInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    tamanho?: FloatFieldUpdateOperationsInput | number
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutBottleSizeNestedInput
  }

  export type BottleSizeUncheckedUpdateManyWithoutWinesInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
    tamanho?: FloatFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeUpdateWithoutWineInput = {
    bottleSize?: BottleSizeUpdateOneRequiredWithoutWineBottleSizeNestedInput
  }

  export type WineBottleSizeUncheckedUpdateWithoutWineInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeUncheckedUpdateManyWithoutWineInput = {
    bottle_size_id?: IntFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeCreateManyBottleSizeInput = {
    wine_id: number
  }

  export type WineUpdateWithoutBottleSizesInput = {
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    averageRating?: FloatFieldUpdateOperationsInput | number
    categoria?: CategoryUpdateOneRequiredWithoutWinesNestedInput
    reviews?: ReviewUpdateManyWithoutWineNestedInput
    WineBottleSize?: WineBottleSizeUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateWithoutBottleSizesInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
    reviews?: ReviewUncheckedUpdateManyWithoutWineNestedInput
    WineBottleSize?: WineBottleSizeUncheckedUpdateManyWithoutWineNestedInput
  }

  export type WineUncheckedUpdateManyWithoutBottleSizesInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
    nome?: StringFieldUpdateOperationsInput | string
    descricao?: StringFieldUpdateOperationsInput | string
    preco?: FloatFieldUpdateOperationsInput | number
    imagem?: StringFieldUpdateOperationsInput | string
    emPromocao?: BoolFieldUpdateOperationsInput | boolean
    precoPromocao?: NullableFloatFieldUpdateOperationsInput | number | null
    emDestaque?: BoolFieldUpdateOperationsInput | boolean
    descricaoDestaque?: NullableStringFieldUpdateOperationsInput | string | null
    categoriaId?: IntFieldUpdateOperationsInput | number
    averageRating?: FloatFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeUpdateWithoutBottleSizeInput = {
    wine?: WineUpdateOneRequiredWithoutWineBottleSizeNestedInput
  }

  export type WineBottleSizeUncheckedUpdateWithoutBottleSizeInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
  }

  export type WineBottleSizeUncheckedUpdateManyWithoutBottleSizeInput = {
    wine_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}